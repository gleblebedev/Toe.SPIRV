// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Toe.SPIRV.CodeGenerator.Views
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Toe.SPIRV.CodeGenerator.Model.Spv;
    using Toe.SPIRV.CodeGenerator.Model.Grammar;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EnumTemplate : EnumTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Toe.SPIRV.Spv\r\n{\r\n " +
                    "   public abstract partial class ");
            
            #line 13 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write(" : ValueEnum\r\n    {\r\n        public enum Enumerant\r\n        {\r\n");
            
            #line 17 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        foreach (var kv in _operand.Enumerants)
        {
            foreach (var capability in kv.capabilities ?? new List<string>())
            {

            
            #line default
            #line hidden
            this.Write("            [Capability(Capability.Enumerant.");
            
            #line 23 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(capability));
            
            #line default
            #line hidden
            this.Write(")]\r\n");
            
            #line 24 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            }

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 27 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterId(_operand, kv.enumerant)));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 27 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kv.value));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 28 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 32 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        foreach (var kv in _operand.Enumerants)
        {
            var enumerantId = ViewUtils.GetParameterId(_operand, kv.enumerant);
            var enumerantType = enumerantId+"Impl";
            var parameters = kv.parameters ?? new List<Parameter>();
            var parameterKv = parameters.Select(parameter=>new KeyValuePair<string,string>(ViewUtils.GetParameterName(enumerantType, parameter), ViewUtils.GetTypeName(System.Enum.Parse<SpirvOperandKind>(parameter.kind))))
                .ToList();
            {

            
            #line default
            #line hidden
            this.Write("\r\n        #region ");
            
            #line 43 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantId));
            
            #line default
            #line hidden
            this.Write("\r\n        public static ");
            
            #line 44 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 44 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantId));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 44 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
 Write(string.Join(", ", parameterKv.Select(parameter=>$"{parameter.Value} {ViewUtils.ToVarName(parameter.Key)}"))); 
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n");
            
            #line 46 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        if (parameters.Count == 0)
        {

            
            #line default
            #line hidden
            this.Write("            return ");
            
            #line 50 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write(".Instance;\r\n");
            
            #line 51 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("            return new ");
            
            #line 56 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 56 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            Write(string.Join(", ", parameterKv.Select(parameter=>$"{ViewUtils.ToVarName(parameter.Key)}")));

            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 59 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("            \r\n        }\r\n\r\n        public class ");
            
            #line 64 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 64 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write("\r\n        {\r\n");
            
            #line 66 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        if (parameters.Count == 0)
        {

            
            #line default
            #line hidden
            this.Write("            public static readonly ");
            
            #line 70 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write(" Instance = new ");
            
            #line 70 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write("();\r\n        \r\n            private  ");
            
            #line 72 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write("()\r\n            {\r\n            }\r\n");
            
            #line 75 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        } //end of if (parameters.Count == 0)
        else
        {

            
            #line default
            #line hidden
            this.Write("            public ");
            
            #line 80 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write("()\r\n            {\r\n            }\r\n\r\n            public ");
            
            #line 84 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 84 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
 Write(string.Join(", ", parameterKv.Select(parameter=>$"{parameter.Value} {ViewUtils.ToVarName(parameter.Key)}"))); 
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n");
            
            #line 86 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            foreach (var parameter in parameterKv)
            {

            
            #line default
            #line hidden
            this.Write("                this.");
            
            #line 90 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Key));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 90 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.ToVarName(parameter.Key)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 91 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            }

            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 95 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        } //end of if (parameters.Count == 0) else

            
            #line default
            #line hidden
            this.Write("            public override Enumerant Value => ");
            
            #line 98 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write(".Enumerant.");
            
            #line 98 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantId));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 99 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        foreach (var parameter in parameterKv)
        {

            
            #line default
            #line hidden
            this.Write("            public ");
            
            #line 103 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((parameter.Key==enumerantId)?"new ":""));
            
            #line default
            #line hidden
            
            #line 103 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Value));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 103 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Key));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 104 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("            public new static ");
            
            #line 107 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write(" Parse(WordReader reader, uint wordCount)\r\n            {\r\n");
            
            #line 109 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        if (parameters.Count == 0)
        {

            
            #line default
            #line hidden
            this.Write("                return Instance;\r\n");
            
            #line 114 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("                var end = reader.Position+wordCount;\r\n                var res = n" +
                    "ew ");
            
            #line 120 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 121 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            foreach (var parameter in parameters)
            {

            
            #line default
            #line hidden
            this.Write("                res.");
            
            #line 125 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterName(enumerantType, parameter)));
            
            #line default
            #line hidden
            this.Write(" = Spv.");
            
            #line 125 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.kind));
            
            #line default
            #line hidden
            this.Write(".Parse(reader, end-reader.Position);\r\n");
            
            #line 126 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            }

            
            #line default
            #line hidden
            this.Write("                return res;\r\n");
            
            #line 130 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 134 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        if (parameters.Count > 0)
        {

            
            #line default
            #line hidden
            this.Write("            public override uint GetWordCount()\r\n            {\r\n                u" +
                    "int wordCount = base.GetWordCount();\r\n");
            
            #line 141 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        foreach (var parameter in parameters)
        {

            
            #line default
            #line hidden
            this.Write("                wordCount += ");
            
            #line 145 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterName(enumerantType, parameter)));
            
            #line default
            #line hidden
            this.Write(".GetWordCount();\r\n");
            
            #line 146 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("                return wordCount;\r\n            }\r\n\r\n            public override v" +
                    "oid Write(WordWriter writer)\r\n            {\r\n                base.Write(writer);" +
                    "\r\n");
            
            #line 155 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        foreach (var parameter in parameters)
        {

            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 159 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterName(enumerantType, parameter)));
            
            #line default
            #line hidden
            this.Write(".Write(writer);\r\n");
            
            #line 160 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("            }\r\n");
            
            #line 164 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        } // if (parameters.Count > 0)

            
            #line default
            #line hidden
            this.Write("\r\n            /// <summary>Returns a string that represents the ");
            
            #line 168 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write(" object.</summary>\r\n            /// <returns>A string that represents the ");
            
            #line 169 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantType));
            
            #line default
            #line hidden
            this.Write(" object.</returns>\r\n            /// <filterpriority>2</filterpriority>\r\n         " +
                    "   public override string ToString()\r\n            {\r\n                return $\" ");
            
            #line 173 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 173 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantId));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 173 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", parameterKv.Select(_=>"{"+_.Key+"}"))));
            
            #line default
            #line hidden
            this.Write(")\";\r\n            }\r\n        }\r\n        #endregion //");
            
            #line 176 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerantId));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 177 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            }
        }

            
            #line default
            #line hidden
            this.Write("\r\n        public abstract Enumerant Value { get; }\r\n\r\n        public static ");
            
            #line 184 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write(" Parse(WordReader reader, uint wordCount)\r\n        {\r\n            var id = (Enume" +
                    "rant) reader.ReadWord();\r\n            switch (id)\r\n            {\r\n");
            
            #line 189 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

        var visitedEnumerants = new HashSet<object>();
        foreach (var kv in _operand.Enumerants)
        {
            if (visitedEnumerants.Add(kv.value))
            {

            
            #line default
            #line hidden
            this.Write("                case Enumerant.");
            
            #line 196 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterId(_operand, kv.enumerant)));
            
            #line default
            #line hidden
            this.Write(" :\r\n                    return ");
            
            #line 197 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterId(_operand, kv.enumerant)));
            
            #line default
            #line hidden
            this.Write("Impl.Parse(reader, wordCount - 1);\r\n");
            
            #line 198 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("                //");
            
            #line 203 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterId(_operand, kv.enumerant)));
            
            #line default
            #line hidden
            this.Write(" has the same id as another value in enum.\r\n                //case Enumerant.");
            
            #line 204 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterId(_operand, kv.enumerant)));
            
            #line default
            #line hidden
            this.Write(" :\r\n                //    return ");
            
            #line 205 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ViewUtils.GetParameterId(_operand, kv.enumerant)));
            
            #line default
            #line hidden
            this.Write(".Parse(reader, wordCount - 1);\r\n");
            
            #line 206 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"

            }
        }

            
            #line default
            #line hidden
            this.Write("                default:\r\n                    throw new IndexOutOfRangeException(" +
                    "\"Unknown ");
            
            #line 211 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write(" \"+id);\r\n            }\r\n        }\r\n        \r\n        public static ");
            
            #line 215 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write(" ParseOptional(WordReader reader, uint wordCount)\r\n        {\r\n            if (wor" +
                    "dCount == 0) return null;\r\n            return Parse(reader, wordCount);\r\n       " +
                    " }\r\n\r\n        public static IList<");
            
            #line 221 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write("> ParseCollection(WordReader reader, uint wordCount)\r\n        {\r\n            var " +
                    "end = reader.Position + wordCount;\r\n            var res = new PrintableList<");
            
            #line 224 "C:\github\Toe.SPIRV\src\Toe.SPIRV.CodeGenerator\Views\EnumTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_operand.Name));
            
            #line default
            #line hidden
            this.Write(@">();
            while (reader.Position < end)
            {
                res.Add(Parse(reader, end-reader.Position));
            }
            return res;
        }

        public override string ToString()
        {
            return Value.ToString();
        }

        public virtual uint GetWordCount()
        {
            return 1;
        }

        public virtual void Write(WordWriter writer)
        {
            writer.WriteWord((uint)Value);
        }
    }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class EnumTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
