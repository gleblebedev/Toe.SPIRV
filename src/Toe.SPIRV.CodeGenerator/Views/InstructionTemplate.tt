<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Toe.SPIRV.CodeGenerator.Model.Grammar" #>
using System.Collections.Generic;
using Toe.SPIRV.Spv;

<#
    var isType = _instruction.IdResult!=null && _instruction.Name.StartsWith("OpType");
#>

namespace Toe.SPIRV.Instructions
{
    public partial class <#= _instruction.Name #>: <#= isType ? "TypeInstruction" : (_instruction.IdResult!=null ? "InstructionWithId" : "Instruction") #>
    {
        public <#= _instruction.Name #>()
        {
        }

        public override Op OpCode { get { return Op.<#= _instruction.Name #>; } }
        
        /// <summary>
        /// Returns true if instruction has IdResult field.
        /// </summary>
        public override bool HasResultId => <#= (_instruction.IdResult!=null)?"true":"false" #>;

        /// <summary>
        /// Returns true if instruction has IdResultType field.
        /// </summary>
        public override bool HasResultType => <#= (_instruction.IdResultType!=null)?"true":"false" #>;
<#
    foreach(var op in _instruction.AllOperands().Where(_=>_.Kind != SpirvOperandKind.IdResult))
    {
#>

        public <#=ViewUtils.GetOperandType(op)#> <#=op.Name#> { get; set; }
<#
    }
#>

        /// <summary>
        /// Read complete instruction from the bytecode source.
        /// </summary>
        /// <param name="reader">Bytecode source.</param>
        /// <param name="end">Index of a next word right after this instruction.</param>
        public override void Parse(WordReader reader, uint end)
        {
<#
    if (_instruction.IdResultType!=null)
    {
        var op = _instruction.IdResultType;
#>
            <#=op.Name#> = <#=ViewUtils.GetOperandParser(op)#>;
<#
    }
    if (_instruction.IdResult!=null)
    {
        var op = _instruction.IdResult;
#>
            <#=op.Name#> = <#=ViewUtils.GetOperandParser(op)#>;
            reader.Instructions.Add(this);
<#
    }
#>
            ParseOperands(reader, end);
            PostParse(reader, end);
        }

        /// <summary>
        /// Read instruction operands from the bytecode source.
        /// </summary>
        /// <param name="reader">Bytecode source.</param>
        /// <param name="end">Index of a next word right after this instruction.</param>
        public override void ParseOperands(WordReader reader, uint end)
        {
<#
    foreach(var op in _instruction.Operands)
    {
#>
            <#=op.Name#> = <#=ViewUtils.GetOperandParser(op)#>;
<#
    }
#>
        }

        /// <summary>
        /// Process parsed instruction if required.
        /// </summary>
        /// <param name="reader">Bytecode source.</param>
        /// <param name="end">Index of a next word right after this instruction.</param>
        partial void PostParse(WordReader reader, uint end);

        /// <summary>
        /// Calculate number of words to fit complete instruction bytecode.
        /// </summary>
        /// <returns>Number of words in instruction bytecode.</returns>
        public override uint GetWordCount()
        {
            uint wordCount = 0;
<#
    foreach(var op in _instruction.AllOperands())
    {
        if (op.Quantifier == SpirvOperandQuantifier.Optional && op.Kind != SpirvOperandKind.IdRef)
        {
#>
            wordCount += <#=op.Name#>?.GetWordCount() ?? 0u;
<#
        }
        else
        {
#>
            wordCount += <#=op.Name#>.GetWordCount();
<#
        }
    }
#>
            return wordCount;
        }

        /// <summary>
        /// Write instruction into bytecode stream.
        /// </summary>
        /// <param name="writer">Bytecode writer.</param>
        public override void Write(WordWriter writer)
        {
<#
    if (_instruction.IdResultType!=null)
    {
        var op = _instruction.IdResultType;
#>
            <#=op.Name#>.Write(writer);
<#
    }
    if (_instruction.IdResult!=null)
    {
        var op = _instruction.IdResult;
#>
            <#=op.Name#>.Write(writer);
<#
    }
#>
            WriteOperands(writer);
            WriteExtras(writer);
        }

        /// <summary>
        /// Write instruction operands into bytecode stream.
        /// </summary>
        /// <param name="writer">Bytecode writer.</param>
        public override void WriteOperands(WordWriter writer)
        {
<#
    foreach(var op in _instruction.Operands)
    {
        if (op.Quantifier == SpirvOperandQuantifier.Optional)
        {
#>
            if (<#=op.Name#> != null) <#=op.Name#>.Write(writer);
<#
        }
        else
        {
#>
            <#=op.Name#>.Write(writer);
<#
        }
    }
#>
        }

        partial void WriteExtras(WordWriter writer);

        public override string ToString()
        {
<#
if (_instruction.IdResultType != null && _instruction.IdResult != null)
{
    WriteLine("            return $\"{IdResultType} {IdResult} = {OpCode} "+string.Join(" ", _instruction.Operands.Select(_=>"{"+_.Name+"}"))+"\";");
}
else if (_instruction.IdResult != null)
{
    WriteLine("            return $\"{IdResult} = {OpCode} "+string.Join(" ", _instruction.Operands.Select(_=>"{"+_.Name+"}"))+"\";");
}
else
{
    WriteLine("            return $\"{OpCode} "+string.Join(" ", _instruction.Operands.Select(_=>"{"+_.Name+"}"))+"\";");
}
#>
        }
    }
}
