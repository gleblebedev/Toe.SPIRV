<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Toe.SPIRV.CodeGenerator.Model.Grammar" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Toe.SPIRV.Instructions;
using Toe.SPIRV.Reflection.Types;
using Toe.SPIRV.Spv;

namespace Toe.SPIRV.Reflection.Nodes
{
    public partial class <#= name #> : <#= baseClass#><#=_instruction.HasDefaultExit?", INodeWithNext":""#>
    {
        public <#= name #>()
        {
        }
<#
{
#>

        public <#= name #>(<#= string.Join(", ", _operands.Concat(new KeyValuePair<string, string>("debugName","string")).Select(_=>$"{_.Value} {ViewUtils.ToVarName(_.Key)}")) #> = null)
        {
<#
foreach (var op in _operands)
{
    if (op.Value.StartsWith("IList<") || op.Value.StartsWith("IEnumerable<"))
    {
#>
            if (<#=ViewUtils.ToVarName(op.Key)#> != null) { foreach (var node in <#=ViewUtils.ToVarName(op.Key)#>) this.<#=op.Key#>.Add(node); }
<#
    }
    else
    {
#>
            this.<#=op.Key#> = <#=ViewUtils.ToVarName(op.Key)#>;
<#
    }
}
#>
            DebugName = debugName;
        }
<#
}
#>

        public override Op OpCode => Op.<#= _instruction.Name #>;
<# 
if (_instruction.HasDefaultExit)
{
#>

        /// <summary>
        /// Next operation in sequence
        /// </summary>
        public ExecutableNode Next { get; set; }

        public override ExecutableNode GetNext()
        {
            return Next;
        }

        public T Then<T>(T node) where T: ExecutableNode
        {
            Next = node;
            return node;
        }
<# 
}
foreach (var op in _instruction.Operands)
{
    switch (op.Class)
    {
        case SpirvOperandClassification.Type:
#>

        public SpirvTypeBase <#=op.Name#> { get; set; }
<# 
            break;
        case SpirvOperandClassification.Exit:
        case SpirvOperandClassification.Input:
#>

        public <#=GetNodeType(op)#> <#=op.Name#> { get; set; }
<# 
            break;
        case SpirvOperandClassification.RepeatedInput:
#>

        public IList<<#=GetNodeType(op)#>> <#=op.Name#> { get; private set; } = new PrintableList<<#=GetNodeType(op)#>>();
<# 
            break;
        default:
            if (op.Quantifier == SpirvOperandQuantifier.Repeated)
            {
#>

        public <#=GetPropertyType(op)#> <#=op.Name#> { get; private set; } = new <#=GetPropertyType(op).Replace("IList<","List<")#>();
<#
            }
            else
            {
#>

        public <#=GetPropertyType(op)#> <#=op.Name#> { get; set; }
<#
            }
            break;
    }
}

if (_instruction.IdResultType != null)
{
#>

        public SpirvTypeBase ResultType { get; set; }

        public override SpirvTypeBase GetResultType()
        {
            return ResultType;
        }
<# 
}

if (_instruction.Operands.Any(op=>op.Class == SpirvOperandClassification.Input || op.Class == SpirvOperandClassification.RepeatedInput))
{
#>

        public override IEnumerable<NodePinWithConnection> InputPins
        {
            get
            {
<# 
foreach (var op in _instruction.Operands)
{
    if (op.Class == SpirvOperandClassification.Input)
    {
#>
                yield return CreateInputPin(nameof(<#=op.Name#>), <#=op.Name#>);
<# 
    }
    else if (op.Class == SpirvOperandClassification.RepeatedInput)
    {
#>
                for (var index = 0; index < <#=op.Name#>.Count; index++)
                {
                    yield return CreateInputPin(nameof(<#=op.Name#>) + index, <#=op.Name#>[index]);
                }
<# 
    }
}
#>
                yield break;
            }
        }
<# 
}
#>

        public override IEnumerable<NodePin> OutputPins
        {
            get
            {
<# 
if (_instruction.IdResultType != null)
{
#>
                yield return new NodePin(this, "", ResultType);
<# 
}
#>
                yield break;
            }
        }

<# 
if (_instruction.HasDefaultEnter)
{
#>
        public override IEnumerable<NodePin> EnterPins
        {
            get
            {
                yield return new NodePin(this, "", null);
            }
        }
<# 
}
#>

        public override IEnumerable<NodePinWithConnection> ExitPins
        {
            get
            {
<# 
if (_instruction.HasDefaultExit)
{
#>
                yield return CreateExitPin("", GetNext());
<# 
}
foreach (var op in _instruction.Operands)
{
    if (op.Class == SpirvOperandClassification.Exit)
    {
#>
                yield return CreateExitPin(nameof(<#=op.Name#>), <#=op.Name#>);
<# 
    }
}
#>
                yield break;
            }
        }

        public <#= name #> WithDecoration(Spv.Decoration decoration)
        {
            AddDecoration(decoration);
            return this;
        }

        public override void SetUp(Instruction op, SpirvInstructionTreeBuilder treeBuilder)
        {
            base.SetUp(op, treeBuilder);
            SetUp((<#= opname #>)op, treeBuilder);
        }

        public <#= name #> SetUp(Action<<#= name #>> setup)
        {
            setup(this);
            return this;
        }

        private void SetUp(<#= opname #> op, SpirvInstructionTreeBuilder treeBuilder)
        {
<# 
if (_instruction.IdResultType != null)
{
#>
            ResultType = treeBuilder.ResolveType(op.IdResultType);
<# 
}

foreach (var op in _instruction.Operands)
{
    switch (op.Class)
    {
        case SpirvOperandClassification.Type:
#>
            <#=op.Name#> = treeBuilder.ResolveType(op.<#=op.Name#>);
<# 
            break;
        case SpirvOperandClassification.Exit:
        case SpirvOperandClassification.Input:
#>
            <#=op.Name#> = <#=CastNodeType(op)#>treeBuilder.GetNode(op.<#=op.Name#>);
<# 
            break;
        case SpirvOperandClassification.RepeatedInput:
#>
            <#=op.Name#> = treeBuilder.GetNodes(op.<#=op.Name#>);
<# 
            break;
        default:
            if (op.Quantifier == SpirvOperandQuantifier.Repeated)
            {
#>
            foreach (var item in op.<#=op.Name#>) { <#=op.Name#>.Add(treeBuilder.Parse(item)); }
<#
            }
            else
            {
#>
            <#=op.Name#> = op.<#=op.Name#>;
<#
            }
            break;
    }
}
#>
            SetUpDecorations(op, treeBuilder);
        }

        /// <summary>Returns a string that represents the <#= name #> object.</summary>
        /// <returns>A string that represents the <#= name #> object.</returns>
        /// <filterpriority>2</filterpriority>
        public override string ToString()
        {
            return $"<#= name #>(<#= string.Join(", ", _operands.Concat(new KeyValuePair<string, string>("DebugName","string")).Select(_=>$"{{{_.Key}}}")) #>)";
        }
    }
<# 
if (_instruction.HasDefaultEnter)
{
#>

    public static partial class INodeWithNextExtensionMethods
    {
        public static <#= name #> Then<#= name #>(this INodeWithNext node<#
foreach (var op in _instruction.Operands)
{
    this.Write(", ");
    switch (op.Class)
    {
        case SpirvOperandClassification.Type:
            this.Write($"SpirvTypeBase {ViewUtils.ToVarName(op.Name)}");
            break;
        case SpirvOperandClassification.Exit:
        case SpirvOperandClassification.Input:
            this.Write($"{GetNodeType(op)} {ViewUtils.ToVarName(op.Name)}");
            break;
        case SpirvOperandClassification.RepeatedInput:
            this.Write($"IEnumerable<{GetNodeType(op)}> {ViewUtils.ToVarName(op.Name)}");
            break;
        default:
            this.Write($"{GetPropertyType(op)} {ViewUtils.ToVarName(op.Name)}");
            break;
    }
}
#>, string debugName = null)
        {
            return node.Then(new <#= name #>(<#
{
    var sep = "";
    foreach (var op in _instruction.Operands)
    {
        this.Write(sep); sep = ", ";
        this.Write(ViewUtils.ToVarName(op.Name));
    }
    this.Write($"{sep}debugName");
}
#>));
        }
    }
<# 
}
#>
}