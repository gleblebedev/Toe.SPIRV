<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Toe.SPIRV.CodeGenerator.Model.Grammar" #>
using System.Collections.Generic;
using Toe.SPIRV.Reflection.Nodes;
using Toe.SPIRV.Reflection.Types;

namespace Toe.SPIRV.Reflection
{
    public abstract class NodeVisitor
    {
        Queue<Node> _nodesToVisit = new Queue<Node>();
        HashSet<Node> _visitedNodes = new HashSet<Node>();

        public virtual void Visit(Node node)
        {
            ScheduleVisit(node);
            while (_nodesToVisit.Count > 0)
            {
                VisitNode(_nodesToVisit.Dequeue());
            }
        }

        protected virtual void ScheduleVisit(Node node)
        {
            if (node != null && _visitedNodes.Add(node))
                _nodesToVisit.Enqueue(node);
        }

        protected virtual void ScheduleVisit(IEnumerable<Node> nodes)
        {
            foreach (var node in nodes)
            {
                ScheduleVisit(node);
            }
        }

        protected virtual void ScheduleVisit(IEnumerable<PairNodeNode> nodes)
        {
            foreach (var node in nodes)
            {
                ScheduleVisit(node.Node);
                ScheduleVisit(node.Node2);
            }
        }

        protected virtual void ScheduleVisit(IEnumerable<PairLiteralIntegerNode> nodes)
        {
            foreach (var node in nodes)
            {
                ScheduleVisit(node.Node);
            }
        }

        protected virtual void ScheduleVisit(IEnumerable<PairNodeLiteralInteger> nodes)
        {
            foreach (var node in nodes)
            {
                ScheduleVisit(node.Node);
            }
        }

        protected virtual void VisitType(SpirvTypeBase node)
        {
        }

        private void VisitNode(Node node)
        {
            switch (node.OpCode)
            {
<#
foreach (var instruction in _grammar.Instructions.Values)
{
#>
                case Spv.Op.<#=instruction.Name#>: Visit<#=instruction.Name.Substring(2)#>((<#=instruction.Name.Substring(2)#>)node); return;
<#
}
#>
            }
        }
<#
foreach (var instruction in _grammar.Instructions.Values)
{
#>

        protected virtual void Visit<#=instruction.Name.Substring(2)#>(<#=instruction.Name.Substring(2)#> node)
        {
<#
if (instruction.Name.StartsWith("OpType"))
{
#>
            VisitType(node);
<#
}
foreach (var operand in instruction.Operands)
{
    switch (operand.Kind)
    {
        case SpirvOperandKind.IdRef:
        case SpirvOperandKind.PairLiteralIntegerIdRef:
        case SpirvOperandKind.PairIdRefIdRef:
        case SpirvOperandKind.PairIdRefLiteralInteger:
        {
#>
            ScheduleVisit(node.<#=operand.Name#>);
<#
            break;
        }
    }
}
#>
        }
<#
}
#>
    }
}