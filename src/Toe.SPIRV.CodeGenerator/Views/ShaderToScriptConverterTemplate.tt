<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using Toe.Scripting;
using Toe.SPIRV.Reflection;
using Toe.SPIRV.Reflection.Nodes;
using Toe.SPIRV.Spv;
using Nodes=Toe.SPIRV.Reflection.Nodes;

namespace Toe.SPIRV
{
    internal class ShaderToScriptConverterBase
    {
        protected Script _script;
        protected Dictionary<Node, ScriptNode> _nodeMap = new Dictionary<Node, ScriptNode>();
        public ShaderToScriptConverterBase()
        {
            _script = new Script();
        }

        protected virtual ScriptNode VisitNode(Node node)
        {
            if (_nodeMap.TryGetValue(node, out var scriptNode))
            {
                return scriptNode;
            }

            switch (node.OpCode)
            {
<#
foreach (var instruction in _grammar.Instructions.Values)
{
    if (!instruction.Name.StartsWith("OpType"))
    {
#>
                case Op.<#=instruction.Name#>: return Visit<#=instruction.Name.Substring(2)#>((Nodes.<#=instruction.Name.Substring(2)#>) node);
<#
    }
}
#>
            }

            throw new NotImplementedException(node.OpCode+" is not implemented yet.");
        }

<#
foreach (var instruction in _grammar.Instructions.Values)
{
    if (!instruction.Name.StartsWith("OpType"))
    {
#>

        protected virtual ScriptNode Visit<#=instruction.Name.Substring(2)#>(Nodes.<#=instruction.Name.Substring(2)#> node)
        {
            var scriptNode = CreateNode(node, "<#=instruction.Name#>", <#=instruction.HasDefaultEnter?"true":"false"#>, <#=instruction.HasDefaultExit?"true":"false"#>, NodeCategory.Function, null);
<#
        if (instruction.HasDefaultExit)
        {
#>
            scriptNode.ExitPins[0].Connection = new Connection(VisitNode(node.Next), "");
<#
        }
#>
            return scriptNode;
        }
<#
    }
}
#>

        protected ScriptNode CreateNode(Node node, string name, bool hasDefaultEnter = false, bool hasDefaultExit = false, NodeCategory category = NodeCategory.Unknown, string value = null)
        {
            var scriptNode = new ScriptNode()
            {
                Name = name,
                Category = category,
                Value = value
            };
            if (hasDefaultEnter)
            {
                scriptNode.EnterPins.Add(new Pin("",null));
            }
            if (hasDefaultExit)
            {
                scriptNode.ExitPins.Add(new PinWithConnection("",null));
            }
            _script.Add(scriptNode);
            _nodeMap.Add(node, scriptNode);
            return scriptNode;
        }
    }
}