<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Toe.SPIRV.Reflection" #>
<#@ import namespace="Toe.SPIRV.Reflection.Types" #>
#version 450

<#
foreach (var structDef in _fields.Fields.Where(_=>_.Type.TypeCategory == SpirvTypeCategory.Struct).Select(_=>(TypeStruct)_.Type).Distinct())
{
#>
struct <#=structDef.DebugName#>
{
<#
    foreach (var field in structDef.Fields)
    {
        if (field.Type.TypeCategory == SpirvTypeCategory.Array)
        {
            var arrayType = (TypeArray)field.Type;
#>
    <#=arrayType.ElementType #> <#=field.Name #> [<#=arrayType.Length #>];
<#
        }
        else
        {
#>
    <#=field.Type #> <#=field.Name #>;
<#
        }
    };
#>
}; // end of <#=structDef.DebugName#>
<#
};
#>

layout(set = 0, binding = 0) uniform <#=_fields.DebugName#>
{
<#
foreach (var field in _fields.Fields)
{
if (field.Type.TypeCategory == SpirvTypeCategory.Array)
{
var arrayType = (TypeArray)field.Type;
#>
    <#=arrayType.ElementType #> <#=field.Name #> [<#=arrayType.Length #>];
<#
}
else
{
#>
    <#=field.Type #> <#=field.Name #>;
<#
}
}
#>
};

layout(location = 0) out vec4 fsin_color;

int AppendHash(int hash, int f)
{
    return (hash*397) ^ f;
}
int AppendHash(int hash, float f)
{
    return AppendHash(hash, int(f));
}
int AppendHash(int hash, double f)
{
    return AppendHash(hash, int(f));
}
int AppendHash(int hash, vec2 m)
{
    hash = AppendHash(hash, m.x);
    hash = AppendHash(hash, m.y);
    return hash;
}
int AppendHash(int hash, vec3 m)
{
    hash = AppendHash(hash, m.x);
    hash = AppendHash(hash, m.y);
    hash = AppendHash(hash, m.z);
    return hash;
}
int AppendHash(int hash, vec4 m)
{
    hash = AppendHash(hash, m.x);
    hash = AppendHash(hash, m.y);
    hash = AppendHash(hash, m.z);
    hash = AppendHash(hash, m.w);
    return hash;
}
int AppendHash(int hash, dvec2 m)
{
    hash = AppendHash(hash, m.x);
    hash = AppendHash(hash, m.y);
    return hash;
}
int AppendHash(int hash, dvec3 m)
{
    hash = AppendHash(hash, m.x);
    hash = AppendHash(hash, m.y);
    hash = AppendHash(hash, m.z);
    return hash;
}
int AppendHash(int hash, dvec4 m)
{
    hash = AppendHash(hash, m.x);
    hash = AppendHash(hash, m.y);
    hash = AppendHash(hash, m.z);
    hash = AppendHash(hash, m.w);
    return hash;
}
int AppendHash(int hash, mat2 m)
{
    hash = AppendHash(hash, m[0][0]);
    hash = AppendHash(hash, m[0][1]);
    hash = AppendHash(hash, m[1][0]);
    hash = AppendHash(hash, m[1][1]);
    return hash;
}
int AppendHash(int hash, mat3 m)
{
    hash = AppendHash(hash, m[0][0]);
    hash = AppendHash(hash, m[0][1]);
    hash = AppendHash(hash, m[0][2]);

    hash = AppendHash(hash, m[1][0]);
    hash = AppendHash(hash, m[1][1]);
    hash = AppendHash(hash, m[1][2]);

    hash = AppendHash(hash, m[2][0]);
    hash = AppendHash(hash, m[2][1]);
    hash = AppendHash(hash, m[2][2]);
    return hash;
}
int AppendHash(int hash, mat4 m)
{
    hash = AppendHash(hash, m[0][0]);
    hash = AppendHash(hash, m[0][1]);
    hash = AppendHash(hash, m[0][2]);
    hash = AppendHash(hash, m[0][3]);

    hash = AppendHash(hash, m[1][0]);
    hash = AppendHash(hash, m[1][1]);
    hash = AppendHash(hash, m[1][2]);
    hash = AppendHash(hash, m[1][3]);

    hash = AppendHash(hash, m[2][0]);
    hash = AppendHash(hash, m[2][1]);
    hash = AppendHash(hash, m[2][2]);
    hash = AppendHash(hash, m[2][3]);

    hash = AppendHash(hash, m[3][0]);
    hash = AppendHash(hash, m[3][1]);
    hash = AppendHash(hash, m[3][2]);
    hash = AppendHash(hash, m[3][3]);
    return hash;
}
<#
foreach (var structDef in _fields.Fields.Where(_=>_.Type.TypeCategory == SpirvTypeCategory.Struct).Select(_=>(TypeStruct)_.Type).Distinct())
{
#>
int AppendHash(int hash, <#=structDef.DebugName#> m)
{
<#
    foreach (var field in structDef.Fields)
    {
        if (field.Type.TypeCategory == SpirvTypeCategory.Array)
        {
            var arrayType = (TypeArray)field.Type;
            for (int i=0; i<arrayType.Length; ++i)
            {
#>
    hash = AppendHash(hash, m.<#=field.Name #>[<#=i #>]);
<#
            }
        }
        else
        {
#>
    hash = AppendHash(hash, m.<#=field.Name #>);
<#
        }
    };
#>
    return hash;
} // end of <#=structDef.DebugName#>
<#
};
#>

void main()
{
    int hash = 0;
<#
foreach (var field in _fields.Fields)
{
if (field.Type.TypeCategory == SpirvTypeCategory.Array)
{
var arrayType = (TypeArray)field.Type;
for (int i=0; i<arrayType.Length; ++i)
{
#>
    hash = AppendHash(hash, <#=field.Name #>[<#=i #>]);
<#
}
}
else
{
#>
    hash = AppendHash(hash, <#=field.Name #>);
<#
}
}
#>
    fsin_color = vec4((hash%256),((hash/256)%256),((hash/65536)%256),((hash/16777216)%256))*(1/255.0);
    gl_Position = vec4(0,0,0.5,1);
}