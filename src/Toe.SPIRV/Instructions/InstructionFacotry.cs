using System;
using Toe.SPIRV.Spv;

namespace Toe.SPIRV.Instructions
{
    public static class InstructionFactory
    {
        private static readonly Func<Instruction>[] _factories;

        static InstructionFactory()
        {
            #region Factories

            _factories = new Func<Instruction>[6033];
            _factories[(int)Op.OpNop] = () => new OpNop();
            _factories[(int)Op.OpUndef] = () => new OpUndef();
            _factories[(int)Op.OpSourceContinued] = () => new OpSourceContinued();
            _factories[(int)Op.OpSource] = () => new OpSource();
            _factories[(int)Op.OpSourceExtension] = () => new OpSourceExtension();
            _factories[(int)Op.OpName] = () => new OpName();
            _factories[(int)Op.OpMemberName] = () => new OpMemberName();
            _factories[(int)Op.OpString] = () => new OpString();
            _factories[(int)Op.OpLine] = () => new OpLine();
            _factories[(int)Op.OpExtension] = () => new OpExtension();
            _factories[(int)Op.OpExtInstImport] = () => new OpExtInstImport();
            _factories[(int)Op.OpExtInst] = () => new OpExtInst();
            _factories[(int)Op.OpMemoryModel] = () => new OpMemoryModel();
            _factories[(int)Op.OpEntryPoint] = () => new OpEntryPoint();
            _factories[(int)Op.OpExecutionMode] = () => new OpExecutionMode();
            _factories[(int)Op.OpCapability] = () => new OpCapability();
            _factories[(int)Op.OpTypeVoid] = () => new OpTypeVoid();
            _factories[(int)Op.OpTypeBool] = () => new OpTypeBool();
            _factories[(int)Op.OpTypeInt] = () => new OpTypeInt();
            _factories[(int)Op.OpTypeFloat] = () => new OpTypeFloat();
            _factories[(int)Op.OpTypeVector] = () => new OpTypeVector();
            _factories[(int)Op.OpTypeMatrix] = () => new OpTypeMatrix();
            _factories[(int)Op.OpTypeImage] = () => new OpTypeImage();
            _factories[(int)Op.OpTypeSampler] = () => new OpTypeSampler();
            _factories[(int)Op.OpTypeSampledImage] = () => new OpTypeSampledImage();
            _factories[(int)Op.OpTypeArray] = () => new OpTypeArray();
            _factories[(int)Op.OpTypeRuntimeArray] = () => new OpTypeRuntimeArray();
            _factories[(int)Op.OpTypeStruct] = () => new OpTypeStruct();
            _factories[(int)Op.OpTypeOpaque] = () => new OpTypeOpaque();
            _factories[(int)Op.OpTypePointer] = () => new OpTypePointer();
            _factories[(int)Op.OpTypeFunction] = () => new OpTypeFunction();
            _factories[(int)Op.OpTypeEvent] = () => new OpTypeEvent();
            _factories[(int)Op.OpTypeDeviceEvent] = () => new OpTypeDeviceEvent();
            _factories[(int)Op.OpTypeReserveId] = () => new OpTypeReserveId();
            _factories[(int)Op.OpTypeQueue] = () => new OpTypeQueue();
            _factories[(int)Op.OpTypePipe] = () => new OpTypePipe();
            _factories[(int)Op.OpTypeForwardPointer] = () => new OpTypeForwardPointer();
            _factories[(int)Op.OpConstantTrue] = () => new OpConstantTrue();
            _factories[(int)Op.OpConstantFalse] = () => new OpConstantFalse();
            _factories[(int)Op.OpConstant] = () => new OpConstant();
            _factories[(int)Op.OpConstantComposite] = () => new OpConstantComposite();
            _factories[(int)Op.OpConstantSampler] = () => new OpConstantSampler();
            _factories[(int)Op.OpConstantNull] = () => new OpConstantNull();
            _factories[(int)Op.OpSpecConstantTrue] = () => new OpSpecConstantTrue();
            _factories[(int)Op.OpSpecConstantFalse] = () => new OpSpecConstantFalse();
            _factories[(int)Op.OpSpecConstant] = () => new OpSpecConstant();
            _factories[(int)Op.OpSpecConstantComposite] = () => new OpSpecConstantComposite();
            _factories[(int)Op.OpSpecConstantOp] = () => new OpSpecConstantOp();
            _factories[(int)Op.OpFunction] = () => new OpFunction();
            _factories[(int)Op.OpFunctionParameter] = () => new OpFunctionParameter();
            _factories[(int)Op.OpFunctionEnd] = () => new OpFunctionEnd();
            _factories[(int)Op.OpFunctionCall] = () => new OpFunctionCall();
            _factories[(int)Op.OpVariable] = () => new OpVariable();
            _factories[(int)Op.OpImageTexelPointer] = () => new OpImageTexelPointer();
            _factories[(int)Op.OpLoad] = () => new OpLoad();
            _factories[(int)Op.OpStore] = () => new OpStore();
            _factories[(int)Op.OpCopyMemory] = () => new OpCopyMemory();
            _factories[(int)Op.OpCopyMemorySized] = () => new OpCopyMemorySized();
            _factories[(int)Op.OpAccessChain] = () => new OpAccessChain();
            _factories[(int)Op.OpInBoundsAccessChain] = () => new OpInBoundsAccessChain();
            _factories[(int)Op.OpPtrAccessChain] = () => new OpPtrAccessChain();
            _factories[(int)Op.OpArrayLength] = () => new OpArrayLength();
            _factories[(int)Op.OpGenericPtrMemSemantics] = () => new OpGenericPtrMemSemantics();
            _factories[(int)Op.OpInBoundsPtrAccessChain] = () => new OpInBoundsPtrAccessChain();
            _factories[(int)Op.OpDecorate] = () => new OpDecorate();
            _factories[(int)Op.OpMemberDecorate] = () => new OpMemberDecorate();
            _factories[(int)Op.OpDecorationGroup] = () => new OpDecorationGroup();
            _factories[(int)Op.OpGroupDecorate] = () => new OpGroupDecorate();
            _factories[(int)Op.OpGroupMemberDecorate] = () => new OpGroupMemberDecorate();
            _factories[(int)Op.OpVectorExtractDynamic] = () => new OpVectorExtractDynamic();
            _factories[(int)Op.OpVectorInsertDynamic] = () => new OpVectorInsertDynamic();
            _factories[(int)Op.OpVectorShuffle] = () => new OpVectorShuffle();
            _factories[(int)Op.OpCompositeConstruct] = () => new OpCompositeConstruct();
            _factories[(int)Op.OpCompositeExtract] = () => new OpCompositeExtract();
            _factories[(int)Op.OpCompositeInsert] = () => new OpCompositeInsert();
            _factories[(int)Op.OpCopyObject] = () => new OpCopyObject();
            _factories[(int)Op.OpTranspose] = () => new OpTranspose();
            _factories[(int)Op.OpSampledImage] = () => new OpSampledImage();
            _factories[(int)Op.OpImageSampleImplicitLod] = () => new OpImageSampleImplicitLod();
            _factories[(int)Op.OpImageSampleExplicitLod] = () => new OpImageSampleExplicitLod();
            _factories[(int)Op.OpImageSampleDrefImplicitLod] = () => new OpImageSampleDrefImplicitLod();
            _factories[(int)Op.OpImageSampleDrefExplicitLod] = () => new OpImageSampleDrefExplicitLod();
            _factories[(int)Op.OpImageSampleProjImplicitLod] = () => new OpImageSampleProjImplicitLod();
            _factories[(int)Op.OpImageSampleProjExplicitLod] = () => new OpImageSampleProjExplicitLod();
            _factories[(int)Op.OpImageSampleProjDrefImplicitLod] = () => new OpImageSampleProjDrefImplicitLod();
            _factories[(int)Op.OpImageSampleProjDrefExplicitLod] = () => new OpImageSampleProjDrefExplicitLod();
            _factories[(int)Op.OpImageFetch] = () => new OpImageFetch();
            _factories[(int)Op.OpImageGather] = () => new OpImageGather();
            _factories[(int)Op.OpImageDrefGather] = () => new OpImageDrefGather();
            _factories[(int)Op.OpImageRead] = () => new OpImageRead();
            _factories[(int)Op.OpImageWrite] = () => new OpImageWrite();
            _factories[(int)Op.OpImage] = () => new OpImage();
            _factories[(int)Op.OpImageQueryFormat] = () => new OpImageQueryFormat();
            _factories[(int)Op.OpImageQueryOrder] = () => new OpImageQueryOrder();
            _factories[(int)Op.OpImageQuerySizeLod] = () => new OpImageQuerySizeLod();
            _factories[(int)Op.OpImageQuerySize] = () => new OpImageQuerySize();
            _factories[(int)Op.OpImageQueryLod] = () => new OpImageQueryLod();
            _factories[(int)Op.OpImageQueryLevels] = () => new OpImageQueryLevels();
            _factories[(int)Op.OpImageQuerySamples] = () => new OpImageQuerySamples();
            _factories[(int)Op.OpConvertFToU] = () => new OpConvertFToU();
            _factories[(int)Op.OpConvertFToS] = () => new OpConvertFToS();
            _factories[(int)Op.OpConvertSToF] = () => new OpConvertSToF();
            _factories[(int)Op.OpConvertUToF] = () => new OpConvertUToF();
            _factories[(int)Op.OpUConvert] = () => new OpUConvert();
            _factories[(int)Op.OpSConvert] = () => new OpSConvert();
            _factories[(int)Op.OpFConvert] = () => new OpFConvert();
            _factories[(int)Op.OpQuantizeToF16] = () => new OpQuantizeToF16();
            _factories[(int)Op.OpConvertPtrToU] = () => new OpConvertPtrToU();
            _factories[(int)Op.OpSatConvertSToU] = () => new OpSatConvertSToU();
            _factories[(int)Op.OpSatConvertUToS] = () => new OpSatConvertUToS();
            _factories[(int)Op.OpConvertUToPtr] = () => new OpConvertUToPtr();
            _factories[(int)Op.OpPtrCastToGeneric] = () => new OpPtrCastToGeneric();
            _factories[(int)Op.OpGenericCastToPtr] = () => new OpGenericCastToPtr();
            _factories[(int)Op.OpGenericCastToPtrExplicit] = () => new OpGenericCastToPtrExplicit();
            _factories[(int)Op.OpBitcast] = () => new OpBitcast();
            _factories[(int)Op.OpSNegate] = () => new OpSNegate();
            _factories[(int)Op.OpFNegate] = () => new OpFNegate();
            _factories[(int)Op.OpIAdd] = () => new OpIAdd();
            _factories[(int)Op.OpFAdd] = () => new OpFAdd();
            _factories[(int)Op.OpISub] = () => new OpISub();
            _factories[(int)Op.OpFSub] = () => new OpFSub();
            _factories[(int)Op.OpIMul] = () => new OpIMul();
            _factories[(int)Op.OpFMul] = () => new OpFMul();
            _factories[(int)Op.OpUDiv] = () => new OpUDiv();
            _factories[(int)Op.OpSDiv] = () => new OpSDiv();
            _factories[(int)Op.OpFDiv] = () => new OpFDiv();
            _factories[(int)Op.OpUMod] = () => new OpUMod();
            _factories[(int)Op.OpSRem] = () => new OpSRem();
            _factories[(int)Op.OpSMod] = () => new OpSMod();
            _factories[(int)Op.OpFRem] = () => new OpFRem();
            _factories[(int)Op.OpFMod] = () => new OpFMod();
            _factories[(int)Op.OpVectorTimesScalar] = () => new OpVectorTimesScalar();
            _factories[(int)Op.OpMatrixTimesScalar] = () => new OpMatrixTimesScalar();
            _factories[(int)Op.OpVectorTimesMatrix] = () => new OpVectorTimesMatrix();
            _factories[(int)Op.OpMatrixTimesVector] = () => new OpMatrixTimesVector();
            _factories[(int)Op.OpMatrixTimesMatrix] = () => new OpMatrixTimesMatrix();
            _factories[(int)Op.OpOuterProduct] = () => new OpOuterProduct();
            _factories[(int)Op.OpDot] = () => new OpDot();
            _factories[(int)Op.OpIAddCarry] = () => new OpIAddCarry();
            _factories[(int)Op.OpISubBorrow] = () => new OpISubBorrow();
            _factories[(int)Op.OpUMulExtended] = () => new OpUMulExtended();
            _factories[(int)Op.OpSMulExtended] = () => new OpSMulExtended();
            _factories[(int)Op.OpAny] = () => new OpAny();
            _factories[(int)Op.OpAll] = () => new OpAll();
            _factories[(int)Op.OpIsNan] = () => new OpIsNan();
            _factories[(int)Op.OpIsInf] = () => new OpIsInf();
            _factories[(int)Op.OpIsFinite] = () => new OpIsFinite();
            _factories[(int)Op.OpIsNormal] = () => new OpIsNormal();
            _factories[(int)Op.OpSignBitSet] = () => new OpSignBitSet();
            _factories[(int)Op.OpLessOrGreater] = () => new OpLessOrGreater();
            _factories[(int)Op.OpOrdered] = () => new OpOrdered();
            _factories[(int)Op.OpUnordered] = () => new OpUnordered();
            _factories[(int)Op.OpLogicalEqual] = () => new OpLogicalEqual();
            _factories[(int)Op.OpLogicalNotEqual] = () => new OpLogicalNotEqual();
            _factories[(int)Op.OpLogicalOr] = () => new OpLogicalOr();
            _factories[(int)Op.OpLogicalAnd] = () => new OpLogicalAnd();
            _factories[(int)Op.OpLogicalNot] = () => new OpLogicalNot();
            _factories[(int)Op.OpSelect] = () => new OpSelect();
            _factories[(int)Op.OpIEqual] = () => new OpIEqual();
            _factories[(int)Op.OpINotEqual] = () => new OpINotEqual();
            _factories[(int)Op.OpUGreaterThan] = () => new OpUGreaterThan();
            _factories[(int)Op.OpSGreaterThan] = () => new OpSGreaterThan();
            _factories[(int)Op.OpUGreaterThanEqual] = () => new OpUGreaterThanEqual();
            _factories[(int)Op.OpSGreaterThanEqual] = () => new OpSGreaterThanEqual();
            _factories[(int)Op.OpULessThan] = () => new OpULessThan();
            _factories[(int)Op.OpSLessThan] = () => new OpSLessThan();
            _factories[(int)Op.OpULessThanEqual] = () => new OpULessThanEqual();
            _factories[(int)Op.OpSLessThanEqual] = () => new OpSLessThanEqual();
            _factories[(int)Op.OpFOrdEqual] = () => new OpFOrdEqual();
            _factories[(int)Op.OpFUnordEqual] = () => new OpFUnordEqual();
            _factories[(int)Op.OpFOrdNotEqual] = () => new OpFOrdNotEqual();
            _factories[(int)Op.OpFUnordNotEqual] = () => new OpFUnordNotEqual();
            _factories[(int)Op.OpFOrdLessThan] = () => new OpFOrdLessThan();
            _factories[(int)Op.OpFUnordLessThan] = () => new OpFUnordLessThan();
            _factories[(int)Op.OpFOrdGreaterThan] = () => new OpFOrdGreaterThan();
            _factories[(int)Op.OpFUnordGreaterThan] = () => new OpFUnordGreaterThan();
            _factories[(int)Op.OpFOrdLessThanEqual] = () => new OpFOrdLessThanEqual();
            _factories[(int)Op.OpFUnordLessThanEqual] = () => new OpFUnordLessThanEqual();
            _factories[(int)Op.OpFOrdGreaterThanEqual] = () => new OpFOrdGreaterThanEqual();
            _factories[(int)Op.OpFUnordGreaterThanEqual] = () => new OpFUnordGreaterThanEqual();
            _factories[(int)Op.OpShiftRightLogical] = () => new OpShiftRightLogical();
            _factories[(int)Op.OpShiftRightArithmetic] = () => new OpShiftRightArithmetic();
            _factories[(int)Op.OpShiftLeftLogical] = () => new OpShiftLeftLogical();
            _factories[(int)Op.OpBitwiseOr] = () => new OpBitwiseOr();
            _factories[(int)Op.OpBitwiseXor] = () => new OpBitwiseXor();
            _factories[(int)Op.OpBitwiseAnd] = () => new OpBitwiseAnd();
            _factories[(int)Op.OpNot] = () => new OpNot();
            _factories[(int)Op.OpBitFieldInsert] = () => new OpBitFieldInsert();
            _factories[(int)Op.OpBitFieldSExtract] = () => new OpBitFieldSExtract();
            _factories[(int)Op.OpBitFieldUExtract] = () => new OpBitFieldUExtract();
            _factories[(int)Op.OpBitReverse] = () => new OpBitReverse();
            _factories[(int)Op.OpBitCount] = () => new OpBitCount();
            _factories[(int)Op.OpDPdx] = () => new OpDPdx();
            _factories[(int)Op.OpDPdy] = () => new OpDPdy();
            _factories[(int)Op.OpFwidth] = () => new OpFwidth();
            _factories[(int)Op.OpDPdxFine] = () => new OpDPdxFine();
            _factories[(int)Op.OpDPdyFine] = () => new OpDPdyFine();
            _factories[(int)Op.OpFwidthFine] = () => new OpFwidthFine();
            _factories[(int)Op.OpDPdxCoarse] = () => new OpDPdxCoarse();
            _factories[(int)Op.OpDPdyCoarse] = () => new OpDPdyCoarse();
            _factories[(int)Op.OpFwidthCoarse] = () => new OpFwidthCoarse();
            _factories[(int)Op.OpEmitVertex] = () => new OpEmitVertex();
            _factories[(int)Op.OpEndPrimitive] = () => new OpEndPrimitive();
            _factories[(int)Op.OpEmitStreamVertex] = () => new OpEmitStreamVertex();
            _factories[(int)Op.OpEndStreamPrimitive] = () => new OpEndStreamPrimitive();
            _factories[(int)Op.OpControlBarrier] = () => new OpControlBarrier();
            _factories[(int)Op.OpMemoryBarrier] = () => new OpMemoryBarrier();
            _factories[(int)Op.OpAtomicLoad] = () => new OpAtomicLoad();
            _factories[(int)Op.OpAtomicStore] = () => new OpAtomicStore();
            _factories[(int)Op.OpAtomicExchange] = () => new OpAtomicExchange();
            _factories[(int)Op.OpAtomicCompareExchange] = () => new OpAtomicCompareExchange();
            _factories[(int)Op.OpAtomicCompareExchangeWeak] = () => new OpAtomicCompareExchangeWeak();
            _factories[(int)Op.OpAtomicIIncrement] = () => new OpAtomicIIncrement();
            _factories[(int)Op.OpAtomicIDecrement] = () => new OpAtomicIDecrement();
            _factories[(int)Op.OpAtomicIAdd] = () => new OpAtomicIAdd();
            _factories[(int)Op.OpAtomicISub] = () => new OpAtomicISub();
            _factories[(int)Op.OpAtomicSMin] = () => new OpAtomicSMin();
            _factories[(int)Op.OpAtomicUMin] = () => new OpAtomicUMin();
            _factories[(int)Op.OpAtomicSMax] = () => new OpAtomicSMax();
            _factories[(int)Op.OpAtomicUMax] = () => new OpAtomicUMax();
            _factories[(int)Op.OpAtomicAnd] = () => new OpAtomicAnd();
            _factories[(int)Op.OpAtomicOr] = () => new OpAtomicOr();
            _factories[(int)Op.OpAtomicXor] = () => new OpAtomicXor();
            _factories[(int)Op.OpPhi] = () => new OpPhi();
            _factories[(int)Op.OpLoopMerge] = () => new OpLoopMerge();
            _factories[(int)Op.OpSelectionMerge] = () => new OpSelectionMerge();
            _factories[(int)Op.OpLabel] = () => new OpLabel();
            _factories[(int)Op.OpBranch] = () => new OpBranch();
            _factories[(int)Op.OpBranchConditional] = () => new OpBranchConditional();
            _factories[(int)Op.OpSwitch] = () => new OpSwitch();
            _factories[(int)Op.OpKill] = () => new OpKill();
            _factories[(int)Op.OpReturn] = () => new OpReturn();
            _factories[(int)Op.OpReturnValue] = () => new OpReturnValue();
            _factories[(int)Op.OpUnreachable] = () => new OpUnreachable();
            _factories[(int)Op.OpLifetimeStart] = () => new OpLifetimeStart();
            _factories[(int)Op.OpLifetimeStop] = () => new OpLifetimeStop();
            _factories[(int)Op.OpGroupAsyncCopy] = () => new OpGroupAsyncCopy();
            _factories[(int)Op.OpGroupWaitEvents] = () => new OpGroupWaitEvents();
            _factories[(int)Op.OpGroupAll] = () => new OpGroupAll();
            _factories[(int)Op.OpGroupAny] = () => new OpGroupAny();
            _factories[(int)Op.OpGroupBroadcast] = () => new OpGroupBroadcast();
            _factories[(int)Op.OpGroupIAdd] = () => new OpGroupIAdd();
            _factories[(int)Op.OpGroupFAdd] = () => new OpGroupFAdd();
            _factories[(int)Op.OpGroupFMin] = () => new OpGroupFMin();
            _factories[(int)Op.OpGroupUMin] = () => new OpGroupUMin();
            _factories[(int)Op.OpGroupSMin] = () => new OpGroupSMin();
            _factories[(int)Op.OpGroupFMax] = () => new OpGroupFMax();
            _factories[(int)Op.OpGroupUMax] = () => new OpGroupUMax();
            _factories[(int)Op.OpGroupSMax] = () => new OpGroupSMax();
            _factories[(int)Op.OpReadPipe] = () => new OpReadPipe();
            _factories[(int)Op.OpWritePipe] = () => new OpWritePipe();
            _factories[(int)Op.OpReservedReadPipe] = () => new OpReservedReadPipe();
            _factories[(int)Op.OpReservedWritePipe] = () => new OpReservedWritePipe();
            _factories[(int)Op.OpReserveReadPipePackets] = () => new OpReserveReadPipePackets();
            _factories[(int)Op.OpReserveWritePipePackets] = () => new OpReserveWritePipePackets();
            _factories[(int)Op.OpCommitReadPipe] = () => new OpCommitReadPipe();
            _factories[(int)Op.OpCommitWritePipe] = () => new OpCommitWritePipe();
            _factories[(int)Op.OpIsValidReserveId] = () => new OpIsValidReserveId();
            _factories[(int)Op.OpGetNumPipePackets] = () => new OpGetNumPipePackets();
            _factories[(int)Op.OpGetMaxPipePackets] = () => new OpGetMaxPipePackets();
            _factories[(int)Op.OpGroupReserveReadPipePackets] = () => new OpGroupReserveReadPipePackets();
            _factories[(int)Op.OpGroupReserveWritePipePackets] = () => new OpGroupReserveWritePipePackets();
            _factories[(int)Op.OpGroupCommitReadPipe] = () => new OpGroupCommitReadPipe();
            _factories[(int)Op.OpGroupCommitWritePipe] = () => new OpGroupCommitWritePipe();
            _factories[(int)Op.OpEnqueueMarker] = () => new OpEnqueueMarker();
            _factories[(int)Op.OpEnqueueKernel] = () => new OpEnqueueKernel();
            _factories[(int)Op.OpGetKernelNDrangeSubGroupCount] = () => new OpGetKernelNDrangeSubGroupCount();
            _factories[(int)Op.OpGetKernelNDrangeMaxSubGroupSize] = () => new OpGetKernelNDrangeMaxSubGroupSize();
            _factories[(int)Op.OpGetKernelWorkGroupSize] = () => new OpGetKernelWorkGroupSize();
            _factories[(int)Op.OpGetKernelPreferredWorkGroupSizeMultiple] = () => new OpGetKernelPreferredWorkGroupSizeMultiple();
            _factories[(int)Op.OpRetainEvent] = () => new OpRetainEvent();
            _factories[(int)Op.OpReleaseEvent] = () => new OpReleaseEvent();
            _factories[(int)Op.OpCreateUserEvent] = () => new OpCreateUserEvent();
            _factories[(int)Op.OpIsValidEvent] = () => new OpIsValidEvent();
            _factories[(int)Op.OpSetUserEventStatus] = () => new OpSetUserEventStatus();
            _factories[(int)Op.OpCaptureEventProfilingInfo] = () => new OpCaptureEventProfilingInfo();
            _factories[(int)Op.OpGetDefaultQueue] = () => new OpGetDefaultQueue();
            _factories[(int)Op.OpBuildNDRange] = () => new OpBuildNDRange();
            _factories[(int)Op.OpImageSparseSampleImplicitLod] = () => new OpImageSparseSampleImplicitLod();
            _factories[(int)Op.OpImageSparseSampleExplicitLod] = () => new OpImageSparseSampleExplicitLod();
            _factories[(int)Op.OpImageSparseSampleDrefImplicitLod] = () => new OpImageSparseSampleDrefImplicitLod();
            _factories[(int)Op.OpImageSparseSampleDrefExplicitLod] = () => new OpImageSparseSampleDrefExplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjImplicitLod] = () => new OpImageSparseSampleProjImplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjExplicitLod] = () => new OpImageSparseSampleProjExplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjDrefImplicitLod] = () => new OpImageSparseSampleProjDrefImplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjDrefExplicitLod] = () => new OpImageSparseSampleProjDrefExplicitLod();
            _factories[(int)Op.OpImageSparseFetch] = () => new OpImageSparseFetch();
            _factories[(int)Op.OpImageSparseGather] = () => new OpImageSparseGather();
            _factories[(int)Op.OpImageSparseDrefGather] = () => new OpImageSparseDrefGather();
            _factories[(int)Op.OpImageSparseTexelsResident] = () => new OpImageSparseTexelsResident();
            _factories[(int)Op.OpNoLine] = () => new OpNoLine();
            _factories[(int)Op.OpAtomicFlagTestAndSet] = () => new OpAtomicFlagTestAndSet();
            _factories[(int)Op.OpAtomicFlagClear] = () => new OpAtomicFlagClear();
            _factories[(int)Op.OpImageSparseRead] = () => new OpImageSparseRead();
            _factories[(int)Op.OpSizeOf] = () => new OpSizeOf();
            _factories[(int)Op.OpTypePipeStorage] = () => new OpTypePipeStorage();
            _factories[(int)Op.OpConstantPipeStorage] = () => new OpConstantPipeStorage();
            _factories[(int)Op.OpCreatePipeFromPipeStorage] = () => new OpCreatePipeFromPipeStorage();
            _factories[(int)Op.OpGetKernelLocalSizeForSubgroupCount] = () => new OpGetKernelLocalSizeForSubgroupCount();
            _factories[(int)Op.OpGetKernelMaxNumSubgroups] = () => new OpGetKernelMaxNumSubgroups();
            _factories[(int)Op.OpTypeNamedBarrier] = () => new OpTypeNamedBarrier();
            _factories[(int)Op.OpNamedBarrierInitialize] = () => new OpNamedBarrierInitialize();
            _factories[(int)Op.OpMemoryNamedBarrier] = () => new OpMemoryNamedBarrier();
            _factories[(int)Op.OpModuleProcessed] = () => new OpModuleProcessed();
            _factories[(int)Op.OpExecutionModeId] = () => new OpExecutionModeId();
            _factories[(int)Op.OpDecorateId] = () => new OpDecorateId();
            _factories[(int)Op.OpGroupNonUniformElect] = () => new OpGroupNonUniformElect();
            _factories[(int)Op.OpGroupNonUniformAll] = () => new OpGroupNonUniformAll();
            _factories[(int)Op.OpGroupNonUniformAny] = () => new OpGroupNonUniformAny();
            _factories[(int)Op.OpGroupNonUniformAllEqual] = () => new OpGroupNonUniformAllEqual();
            _factories[(int)Op.OpGroupNonUniformBroadcast] = () => new OpGroupNonUniformBroadcast();
            _factories[(int)Op.OpGroupNonUniformBroadcastFirst] = () => new OpGroupNonUniformBroadcastFirst();
            _factories[(int)Op.OpGroupNonUniformBallot] = () => new OpGroupNonUniformBallot();
            _factories[(int)Op.OpGroupNonUniformInverseBallot] = () => new OpGroupNonUniformInverseBallot();
            _factories[(int)Op.OpGroupNonUniformBallotBitExtract] = () => new OpGroupNonUniformBallotBitExtract();
            _factories[(int)Op.OpGroupNonUniformBallotBitCount] = () => new OpGroupNonUniformBallotBitCount();
            _factories[(int)Op.OpGroupNonUniformBallotFindLSB] = () => new OpGroupNonUniformBallotFindLSB();
            _factories[(int)Op.OpGroupNonUniformBallotFindMSB] = () => new OpGroupNonUniformBallotFindMSB();
            _factories[(int)Op.OpGroupNonUniformShuffle] = () => new OpGroupNonUniformShuffle();
            _factories[(int)Op.OpGroupNonUniformShuffleXor] = () => new OpGroupNonUniformShuffleXor();
            _factories[(int)Op.OpGroupNonUniformShuffleUp] = () => new OpGroupNonUniformShuffleUp();
            _factories[(int)Op.OpGroupNonUniformShuffleDown] = () => new OpGroupNonUniformShuffleDown();
            _factories[(int)Op.OpGroupNonUniformIAdd] = () => new OpGroupNonUniformIAdd();
            _factories[(int)Op.OpGroupNonUniformFAdd] = () => new OpGroupNonUniformFAdd();
            _factories[(int)Op.OpGroupNonUniformIMul] = () => new OpGroupNonUniformIMul();
            _factories[(int)Op.OpGroupNonUniformFMul] = () => new OpGroupNonUniformFMul();
            _factories[(int)Op.OpGroupNonUniformSMin] = () => new OpGroupNonUniformSMin();
            _factories[(int)Op.OpGroupNonUniformUMin] = () => new OpGroupNonUniformUMin();
            _factories[(int)Op.OpGroupNonUniformFMin] = () => new OpGroupNonUniformFMin();
            _factories[(int)Op.OpGroupNonUniformSMax] = () => new OpGroupNonUniformSMax();
            _factories[(int)Op.OpGroupNonUniformUMax] = () => new OpGroupNonUniformUMax();
            _factories[(int)Op.OpGroupNonUniformFMax] = () => new OpGroupNonUniformFMax();
            _factories[(int)Op.OpGroupNonUniformBitwiseAnd] = () => new OpGroupNonUniformBitwiseAnd();
            _factories[(int)Op.OpGroupNonUniformBitwiseOr] = () => new OpGroupNonUniformBitwiseOr();
            _factories[(int)Op.OpGroupNonUniformBitwiseXor] = () => new OpGroupNonUniformBitwiseXor();
            _factories[(int)Op.OpGroupNonUniformLogicalAnd] = () => new OpGroupNonUniformLogicalAnd();
            _factories[(int)Op.OpGroupNonUniformLogicalOr] = () => new OpGroupNonUniformLogicalOr();
            _factories[(int)Op.OpGroupNonUniformLogicalXor] = () => new OpGroupNonUniformLogicalXor();
            _factories[(int)Op.OpGroupNonUniformQuadBroadcast] = () => new OpGroupNonUniformQuadBroadcast();
            _factories[(int)Op.OpGroupNonUniformQuadSwap] = () => new OpGroupNonUniformQuadSwap();
            _factories[(int)Op.OpCopyLogical] = () => new OpCopyLogical();
            _factories[(int)Op.OpPtrEqual] = () => new OpPtrEqual();
            _factories[(int)Op.OpPtrNotEqual] = () => new OpPtrNotEqual();
            _factories[(int)Op.OpPtrDiff] = () => new OpPtrDiff();
            _factories[(int)Op.OpSubgroupBallotKHR] = () => new OpSubgroupBallotKHR();
            _factories[(int)Op.OpSubgroupFirstInvocationKHR] = () => new OpSubgroupFirstInvocationKHR();
            _factories[(int)Op.OpSubgroupAllKHR] = () => new OpSubgroupAllKHR();
            _factories[(int)Op.OpSubgroupAnyKHR] = () => new OpSubgroupAnyKHR();
            _factories[(int)Op.OpSubgroupAllEqualKHR] = () => new OpSubgroupAllEqualKHR();
            _factories[(int)Op.OpSubgroupReadInvocationKHR] = () => new OpSubgroupReadInvocationKHR();
            _factories[(int)Op.OpGroupIAddNonUniformAMD] = () => new OpGroupIAddNonUniformAMD();
            _factories[(int)Op.OpGroupFAddNonUniformAMD] = () => new OpGroupFAddNonUniformAMD();
            _factories[(int)Op.OpGroupFMinNonUniformAMD] = () => new OpGroupFMinNonUniformAMD();
            _factories[(int)Op.OpGroupUMinNonUniformAMD] = () => new OpGroupUMinNonUniformAMD();
            _factories[(int)Op.OpGroupSMinNonUniformAMD] = () => new OpGroupSMinNonUniformAMD();
            _factories[(int)Op.OpGroupFMaxNonUniformAMD] = () => new OpGroupFMaxNonUniformAMD();
            _factories[(int)Op.OpGroupUMaxNonUniformAMD] = () => new OpGroupUMaxNonUniformAMD();
            _factories[(int)Op.OpGroupSMaxNonUniformAMD] = () => new OpGroupSMaxNonUniformAMD();
            _factories[(int)Op.OpFragmentMaskFetchAMD] = () => new OpFragmentMaskFetchAMD();
            _factories[(int)Op.OpFragmentFetchAMD] = () => new OpFragmentFetchAMD();
            _factories[(int)Op.OpReadClockKHR] = () => new OpReadClockKHR();
            _factories[(int)Op.OpImageSampleFootprintNV] = () => new OpImageSampleFootprintNV();
            _factories[(int)Op.OpGroupNonUniformPartitionNV] = () => new OpGroupNonUniformPartitionNV();
            _factories[(int)Op.OpWritePackedPrimitiveIndices4x8NV] = () => new OpWritePackedPrimitiveIndices4x8NV();
            _factories[(int)Op.OpReportIntersectionNV] = () => new OpReportIntersectionNV();
            _factories[(int)Op.OpIgnoreIntersectionNV] = () => new OpIgnoreIntersectionNV();
            _factories[(int)Op.OpTerminateRayNV] = () => new OpTerminateRayNV();
            _factories[(int)Op.OpTraceNV] = () => new OpTraceNV();
            _factories[(int)Op.OpTypeAccelerationStructureNV] = () => new OpTypeAccelerationStructureNV();
            _factories[(int)Op.OpTypeRayQueryProvisionalKHR] = () => new OpTypeRayQueryProvisionalKHR();
            _factories[(int)Op.OpRayQueryInitializeKHR] = () => new OpRayQueryInitializeKHR();
            _factories[(int)Op.OpRayQueryTerminateKHR] = () => new OpRayQueryTerminateKHR();
            _factories[(int)Op.OpRayQueryGenerateIntersectionKHR] = () => new OpRayQueryGenerateIntersectionKHR();
            _factories[(int)Op.OpRayQueryConfirmIntersectionKHR] = () => new OpRayQueryConfirmIntersectionKHR();
            _factories[(int)Op.OpRayQueryProceedKHR] = () => new OpRayQueryProceedKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionTypeKHR] = () => new OpRayQueryGetIntersectionTypeKHR();
            _factories[(int)Op.OpRayQueryGetRayTMinKHR] = () => new OpRayQueryGetRayTMinKHR();
            _factories[(int)Op.OpRayQueryGetRayFlagsKHR] = () => new OpRayQueryGetRayFlagsKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionTKHR] = () => new OpRayQueryGetIntersectionTKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR] = () => new OpRayQueryGetIntersectionInstanceCustomIndexKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionInstanceIdKHR] = () => new OpRayQueryGetIntersectionInstanceIdKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR] = () => new OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionGeometryIndexKHR] = () => new OpRayQueryGetIntersectionGeometryIndexKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionPrimitiveIndexKHR] = () => new OpRayQueryGetIntersectionPrimitiveIndexKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionBarycentricsKHR] = () => new OpRayQueryGetIntersectionBarycentricsKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionFrontFaceKHR] = () => new OpRayQueryGetIntersectionFrontFaceKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR] = () => new OpRayQueryGetIntersectionCandidateAABBOpaqueKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionObjectRayDirectionKHR] = () => new OpRayQueryGetIntersectionObjectRayDirectionKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionObjectRayOriginKHR] = () => new OpRayQueryGetIntersectionObjectRayOriginKHR();
            _factories[(int)Op.OpRayQueryGetWorldRayDirectionKHR] = () => new OpRayQueryGetWorldRayDirectionKHR();
            _factories[(int)Op.OpRayQueryGetWorldRayOriginKHR] = () => new OpRayQueryGetWorldRayOriginKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionObjectToWorldKHR] = () => new OpRayQueryGetIntersectionObjectToWorldKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionWorldToObjectKHR] = () => new OpRayQueryGetIntersectionWorldToObjectKHR();
            _factories[(int)Op.OpExecuteCallableNV] = () => new OpExecuteCallableNV();
            _factories[(int)Op.OpTypeCooperativeMatrixNV] = () => new OpTypeCooperativeMatrixNV();
            _factories[(int)Op.OpCooperativeMatrixLoadNV] = () => new OpCooperativeMatrixLoadNV();
            _factories[(int)Op.OpCooperativeMatrixStoreNV] = () => new OpCooperativeMatrixStoreNV();
            _factories[(int)Op.OpCooperativeMatrixMulAddNV] = () => new OpCooperativeMatrixMulAddNV();
            _factories[(int)Op.OpCooperativeMatrixLengthNV] = () => new OpCooperativeMatrixLengthNV();
            _factories[(int)Op.OpBeginInvocationInterlockEXT] = () => new OpBeginInvocationInterlockEXT();
            _factories[(int)Op.OpEndInvocationInterlockEXT] = () => new OpEndInvocationInterlockEXT();
            _factories[(int)Op.OpDemoteToHelperInvocationEXT] = () => new OpDemoteToHelperInvocationEXT();
            _factories[(int)Op.OpIsHelperInvocationEXT] = () => new OpIsHelperInvocationEXT();
            _factories[(int)Op.OpSubgroupShuffleINTEL] = () => new OpSubgroupShuffleINTEL();
            _factories[(int)Op.OpSubgroupShuffleDownINTEL] = () => new OpSubgroupShuffleDownINTEL();
            _factories[(int)Op.OpSubgroupShuffleUpINTEL] = () => new OpSubgroupShuffleUpINTEL();
            _factories[(int)Op.OpSubgroupShuffleXorINTEL] = () => new OpSubgroupShuffleXorINTEL();
            _factories[(int)Op.OpSubgroupBlockReadINTEL] = () => new OpSubgroupBlockReadINTEL();
            _factories[(int)Op.OpSubgroupBlockWriteINTEL] = () => new OpSubgroupBlockWriteINTEL();
            _factories[(int)Op.OpSubgroupImageBlockReadINTEL] = () => new OpSubgroupImageBlockReadINTEL();
            _factories[(int)Op.OpSubgroupImageBlockWriteINTEL] = () => new OpSubgroupImageBlockWriteINTEL();
            _factories[(int)Op.OpSubgroupImageMediaBlockReadINTEL] = () => new OpSubgroupImageMediaBlockReadINTEL();
            _factories[(int)Op.OpSubgroupImageMediaBlockWriteINTEL] = () => new OpSubgroupImageMediaBlockWriteINTEL();
            _factories[(int)Op.OpUCountLeadingZerosINTEL] = () => new OpUCountLeadingZerosINTEL();
            _factories[(int)Op.OpUCountTrailingZerosINTEL] = () => new OpUCountTrailingZerosINTEL();
            _factories[(int)Op.OpAbsISubINTEL] = () => new OpAbsISubINTEL();
            _factories[(int)Op.OpAbsUSubINTEL] = () => new OpAbsUSubINTEL();
            _factories[(int)Op.OpIAddSatINTEL] = () => new OpIAddSatINTEL();
            _factories[(int)Op.OpUAddSatINTEL] = () => new OpUAddSatINTEL();
            _factories[(int)Op.OpIAverageINTEL] = () => new OpIAverageINTEL();
            _factories[(int)Op.OpUAverageINTEL] = () => new OpUAverageINTEL();
            _factories[(int)Op.OpIAverageRoundedINTEL] = () => new OpIAverageRoundedINTEL();
            _factories[(int)Op.OpUAverageRoundedINTEL] = () => new OpUAverageRoundedINTEL();
            _factories[(int)Op.OpISubSatINTEL] = () => new OpISubSatINTEL();
            _factories[(int)Op.OpUSubSatINTEL] = () => new OpUSubSatINTEL();
            _factories[(int)Op.OpIMul32x16INTEL] = () => new OpIMul32x16INTEL();
            _factories[(int)Op.OpUMul32x16INTEL] = () => new OpUMul32x16INTEL();
            _factories[(int)Op.OpDecorateString] = () => new OpDecorateString();
            _factories[(int)Op.OpMemberDecorateString] = () => new OpMemberDecorateString();
            _factories[(int)Op.OpVmeImageINTEL] = () => new OpVmeImageINTEL();
            _factories[(int)Op.OpTypeVmeImageINTEL] = () => new OpTypeVmeImageINTEL();
            _factories[(int)Op.OpTypeAvcImePayloadINTEL] = () => new OpTypeAvcImePayloadINTEL();
            _factories[(int)Op.OpTypeAvcRefPayloadINTEL] = () => new OpTypeAvcRefPayloadINTEL();
            _factories[(int)Op.OpTypeAvcSicPayloadINTEL] = () => new OpTypeAvcSicPayloadINTEL();
            _factories[(int)Op.OpTypeAvcMcePayloadINTEL] = () => new OpTypeAvcMcePayloadINTEL();
            _factories[(int)Op.OpTypeAvcMceResultINTEL] = () => new OpTypeAvcMceResultINTEL();
            _factories[(int)Op.OpTypeAvcImeResultINTEL] = () => new OpTypeAvcImeResultINTEL();
            _factories[(int)Op.OpTypeAvcImeResultSingleReferenceStreamoutINTEL] = () => new OpTypeAvcImeResultSingleReferenceStreamoutINTEL();
            _factories[(int)Op.OpTypeAvcImeResultDualReferenceStreamoutINTEL] = () => new OpTypeAvcImeResultDualReferenceStreamoutINTEL();
            _factories[(int)Op.OpTypeAvcImeSingleReferenceStreaminINTEL] = () => new OpTypeAvcImeSingleReferenceStreaminINTEL();
            _factories[(int)Op.OpTypeAvcImeDualReferenceStreaminINTEL] = () => new OpTypeAvcImeDualReferenceStreaminINTEL();
            _factories[(int)Op.OpTypeAvcRefResultINTEL] = () => new OpTypeAvcRefResultINTEL();
            _factories[(int)Op.OpTypeAvcSicResultINTEL] = () => new OpTypeAvcSicResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL] = () => new OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL] = () => new OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL] = () => new OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetInterShapePenaltyINTEL] = () => new OpSubgroupAvcMceSetInterShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL] = () => new OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetInterDirectionPenaltyINTEL] = () => new OpSubgroupAvcMceSetInterDirectionPenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL] = () => new OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL] = () => new OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL] = () => new OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL] = () => new OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL] = () => new OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL] = () => new OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL] = () => new OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL] = () => new OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL] = () => new OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetAcOnlyHaarINTEL] = () => new OpSubgroupAvcMceSetAcOnlyHaarINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL] = () => new OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL] = () => new OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL] = () => new OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToImePayloadINTEL] = () => new OpSubgroupAvcMceConvertToImePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToImeResultINTEL] = () => new OpSubgroupAvcMceConvertToImeResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToRefPayloadINTEL] = () => new OpSubgroupAvcMceConvertToRefPayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToRefResultINTEL] = () => new OpSubgroupAvcMceConvertToRefResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToSicPayloadINTEL] = () => new OpSubgroupAvcMceConvertToSicPayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToSicResultINTEL] = () => new OpSubgroupAvcMceConvertToSicResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetMotionVectorsINTEL] = () => new OpSubgroupAvcMceGetMotionVectorsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterDistortionsINTEL] = () => new OpSubgroupAvcMceGetInterDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetBestInterDistortionsINTEL] = () => new OpSubgroupAvcMceGetBestInterDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterMajorShapeINTEL] = () => new OpSubgroupAvcMceGetInterMajorShapeINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterMinorShapeINTEL] = () => new OpSubgroupAvcMceGetInterMinorShapeINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterDirectionsINTEL] = () => new OpSubgroupAvcMceGetInterDirectionsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterMotionVectorCountINTEL] = () => new OpSubgroupAvcMceGetInterMotionVectorCountINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterReferenceIdsINTEL] = () => new OpSubgroupAvcMceGetInterReferenceIdsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL] = () => new OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL();
            _factories[(int)Op.OpSubgroupAvcImeInitializeINTEL] = () => new OpSubgroupAvcImeInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetSingleReferenceINTEL] = () => new OpSubgroupAvcImeSetSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetDualReferenceINTEL] = () => new OpSubgroupAvcImeSetDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeRefWindowSizeINTEL] = () => new OpSubgroupAvcImeRefWindowSizeINTEL();
            _factories[(int)Op.OpSubgroupAvcImeAdjustRefOffsetINTEL] = () => new OpSubgroupAvcImeAdjustRefOffsetINTEL();
            _factories[(int)Op.OpSubgroupAvcImeConvertToMcePayloadINTEL] = () => new OpSubgroupAvcImeConvertToMcePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetMaxMotionVectorCountINTEL] = () => new OpSubgroupAvcImeSetMaxMotionVectorCountINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL] = () => new OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL] = () => new OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetWeightedSadINTEL] = () => new OpSubgroupAvcImeSetWeightedSadINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL] = () => new OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceINTEL] = () => new OpSubgroupAvcImeEvaluateWithDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL] = () => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL] = () => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL] = () => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL] = () => new OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL] = () => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL] = () => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeConvertToMceResultINTEL] = () => new OpSubgroupAvcImeConvertToMceResultINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetSingleReferenceStreaminINTEL] = () => new OpSubgroupAvcImeGetSingleReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetDualReferenceStreaminINTEL] = () => new OpSubgroupAvcImeGetDualReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL] = () => new OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeStripDualReferenceStreamoutINTEL] = () => new OpSubgroupAvcImeStripDualReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL] = () => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL] = () => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL] = () => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL] = () => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL] = () => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL] = () => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetBorderReachedINTEL] = () => new OpSubgroupAvcImeGetBorderReachedINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL] = () => new OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL] = () => new OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL] = () => new OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL] = () => new OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL();
            _factories[(int)Op.OpSubgroupAvcFmeInitializeINTEL] = () => new OpSubgroupAvcFmeInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcBmeInitializeINTEL] = () => new OpSubgroupAvcBmeInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcRefConvertToMcePayloadINTEL] = () => new OpSubgroupAvcRefConvertToMcePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcRefSetBidirectionalMixDisableINTEL] = () => new OpSubgroupAvcRefSetBidirectionalMixDisableINTEL();
            _factories[(int)Op.OpSubgroupAvcRefSetBilinearFilterEnableINTEL] = () => new OpSubgroupAvcRefSetBilinearFilterEnableINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL] = () => new OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithDualReferenceINTEL] = () => new OpSubgroupAvcRefEvaluateWithDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL] = () => new OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL] = () => new OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL();
            _factories[(int)Op.OpSubgroupAvcRefConvertToMceResultINTEL] = () => new OpSubgroupAvcRefConvertToMceResultINTEL();
            _factories[(int)Op.OpSubgroupAvcSicInitializeINTEL] = () => new OpSubgroupAvcSicInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConfigureSkcINTEL] = () => new OpSubgroupAvcSicConfigureSkcINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConfigureIpeLumaINTEL] = () => new OpSubgroupAvcSicConfigureIpeLumaINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConfigureIpeLumaChromaINTEL] = () => new OpSubgroupAvcSicConfigureIpeLumaChromaINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetMotionVectorMaskINTEL] = () => new OpSubgroupAvcSicGetMotionVectorMaskINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConvertToMcePayloadINTEL] = () => new OpSubgroupAvcSicConvertToMcePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL] = () => new OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL] = () => new OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL] = () => new OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetBilinearFilterEnableINTEL] = () => new OpSubgroupAvcSicSetBilinearFilterEnableINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL] = () => new OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL] = () => new OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateIpeINTEL] = () => new OpSubgroupAvcSicEvaluateIpeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL] = () => new OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithDualReferenceINTEL] = () => new OpSubgroupAvcSicEvaluateWithDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL] = () => new OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL] = () => new OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConvertToMceResultINTEL] = () => new OpSubgroupAvcSicConvertToMceResultINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetIpeLumaShapeINTEL] = () => new OpSubgroupAvcSicGetIpeLumaShapeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL] = () => new OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL] = () => new OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetPackedIpeLumaModesINTEL] = () => new OpSubgroupAvcSicGetPackedIpeLumaModesINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetIpeChromaModeINTEL] = () => new OpSubgroupAvcSicGetIpeChromaModeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL] = () => new OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL] = () => new OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetInterRawSadsINTEL] = () => new OpSubgroupAvcSicGetInterRawSadsINTEL();

            #endregion
        }

        public static Instruction Parse(WordReader reader)
        {
            var pos = reader.Position;
            var opCode = reader.ReadWord();
            var op = (Op) (opCode & 0x0FFFF);
            var wordCount = (opCode >> 16) & 0x0FFFF;
            var end = pos + wordCount;
            var instruction = Create(op);
            instruction.Parse(reader, end);
            if (reader.Position != end) throw new FormatException();

            return instruction;
        }

        public static Instruction Create(Op op)
        {
            var factory = _factories[(int) op];
            if (factory != null)
                return factory();
            throw new NotImplementedException("Factory isn't implemented for " + op);
        }
    }
}