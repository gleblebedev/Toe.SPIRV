using System;
using Toe.SPIRV.Spv;

namespace Toe.SPIRV.Instructions
{
    public static class InstructionFactory
    {
        private static readonly Func<Instruction>[] _factories;

        static InstructionFactory()
        {
            #region Factories

            _factories = new Func<Instruction>[5634];
            _factories[(int) Op.OpNop] = () => new OpNop();
            _factories[(int) Op.OpUndef] = () => new OpUndef();
            _factories[(int) Op.OpSourceContinued] = () => new OpSourceContinued();
            _factories[(int) Op.OpSource] = () => new OpSource();
            _factories[(int) Op.OpSourceExtension] = () => new OpSourceExtension();
            _factories[(int) Op.OpName] = () => new OpName();
            _factories[(int) Op.OpMemberName] = () => new OpMemberName();
            _factories[(int) Op.OpString] = () => new OpString();
            _factories[(int) Op.OpLine] = () => new OpLine();
            _factories[(int) Op.OpExtension] = () => new OpExtension();
            _factories[(int) Op.OpExtInstImport] = () => new OpExtInstImport();
            _factories[(int) Op.OpExtInst] = () => new OpExtInst();
            _factories[(int) Op.OpMemoryModel] = () => new OpMemoryModel();
            _factories[(int) Op.OpEntryPoint] = () => new OpEntryPoint();
            _factories[(int) Op.OpExecutionMode] = () => new OpExecutionMode();
            _factories[(int) Op.OpCapability] = () => new OpCapability();
            _factories[(int) Op.OpTypeVoid] = () => new OpTypeVoid();
            _factories[(int) Op.OpTypeBool] = () => new OpTypeBool();
            _factories[(int) Op.OpTypeInt] = () => new OpTypeInt();
            _factories[(int) Op.OpTypeFloat] = () => new OpTypeFloat();
            _factories[(int) Op.OpTypeVector] = () => new OpTypeVector();
            _factories[(int) Op.OpTypeMatrix] = () => new OpTypeMatrix();
            _factories[(int) Op.OpTypeImage] = () => new OpTypeImage();
            _factories[(int) Op.OpTypeSampler] = () => new OpTypeSampler();
            _factories[(int) Op.OpTypeSampledImage] = () => new OpTypeSampledImage();
            _factories[(int) Op.OpTypeArray] = () => new OpTypeArray();
            _factories[(int) Op.OpTypeRuntimeArray] = () => new OpTypeRuntimeArray();
            _factories[(int) Op.OpTypeStruct] = () => new OpTypeStruct();
            _factories[(int) Op.OpTypeOpaque] = () => new OpTypeOpaque();
            _factories[(int) Op.OpTypePointer] = () => new OpTypePointer();
            _factories[(int) Op.OpTypeFunction] = () => new OpTypeFunction();
            _factories[(int) Op.OpTypeEvent] = () => new OpTypeEvent();
            _factories[(int) Op.OpTypeDeviceEvent] = () => new OpTypeDeviceEvent();
            _factories[(int) Op.OpTypeReserveId] = () => new OpTypeReserveId();
            _factories[(int) Op.OpTypeQueue] = () => new OpTypeQueue();
            _factories[(int) Op.OpTypePipe] = () => new OpTypePipe();
            _factories[(int) Op.OpTypeForwardPointer] = () => new OpTypeForwardPointer();
            _factories[(int) Op.OpConstantTrue] = () => new OpConstantTrue();
            _factories[(int) Op.OpConstantFalse] = () => new OpConstantFalse();
            _factories[(int) Op.OpConstant] = () => new OpConstant();
            _factories[(int) Op.OpConstantComposite] = () => new OpConstantComposite();
            _factories[(int) Op.OpConstantSampler] = () => new OpConstantSampler();
            _factories[(int) Op.OpConstantNull] = () => new OpConstantNull();
            _factories[(int) Op.OpSpecConstantTrue] = () => new OpSpecConstantTrue();
            _factories[(int) Op.OpSpecConstantFalse] = () => new OpSpecConstantFalse();
            _factories[(int) Op.OpSpecConstant] = () => new OpSpecConstant();
            _factories[(int) Op.OpSpecConstantComposite] = () => new OpSpecConstantComposite();
            _factories[(int) Op.OpSpecConstantOp] = () => new OpSpecConstantOp();
            _factories[(int) Op.OpFunction] = () => new OpFunction();
            _factories[(int) Op.OpFunctionParameter] = () => new OpFunctionParameter();
            _factories[(int) Op.OpFunctionEnd] = () => new OpFunctionEnd();
            _factories[(int) Op.OpFunctionCall] = () => new OpFunctionCall();
            _factories[(int) Op.OpVariable] = () => new OpVariable();
            _factories[(int) Op.OpImageTexelPointer] = () => new OpImageTexelPointer();
            _factories[(int) Op.OpLoad] = () => new OpLoad();
            _factories[(int) Op.OpStore] = () => new OpStore();
            _factories[(int) Op.OpCopyMemory] = () => new OpCopyMemory();
            _factories[(int) Op.OpCopyMemorySized] = () => new OpCopyMemorySized();
            _factories[(int) Op.OpAccessChain] = () => new OpAccessChain();
            _factories[(int) Op.OpInBoundsAccessChain] = () => new OpInBoundsAccessChain();
            _factories[(int) Op.OpPtrAccessChain] = () => new OpPtrAccessChain();
            _factories[(int) Op.OpArrayLength] = () => new OpArrayLength();
            _factories[(int) Op.OpGenericPtrMemSemantics] = () => new OpGenericPtrMemSemantics();
            _factories[(int) Op.OpInBoundsPtrAccessChain] = () => new OpInBoundsPtrAccessChain();
            _factories[(int) Op.OpDecorate] = () => new OpDecorate();
            _factories[(int) Op.OpMemberDecorate] = () => new OpMemberDecorate();
            _factories[(int) Op.OpDecorationGroup] = () => new OpDecorationGroup();
            _factories[(int) Op.OpGroupDecorate] = () => new OpGroupDecorate();
            _factories[(int) Op.OpGroupMemberDecorate] = () => new OpGroupMemberDecorate();
            _factories[(int) Op.OpVectorExtractDynamic] = () => new OpVectorExtractDynamic();
            _factories[(int) Op.OpVectorInsertDynamic] = () => new OpVectorInsertDynamic();
            _factories[(int) Op.OpVectorShuffle] = () => new OpVectorShuffle();
            _factories[(int) Op.OpCompositeConstruct] = () => new OpCompositeConstruct();
            _factories[(int) Op.OpCompositeExtract] = () => new OpCompositeExtract();
            _factories[(int) Op.OpCompositeInsert] = () => new OpCompositeInsert();
            _factories[(int) Op.OpCopyObject] = () => new OpCopyObject();
            _factories[(int) Op.OpTranspose] = () => new OpTranspose();
            _factories[(int) Op.OpSampledImage] = () => new OpSampledImage();
            _factories[(int) Op.OpImageSampleImplicitLod] = () => new OpImageSampleImplicitLod();
            _factories[(int) Op.OpImageSampleExplicitLod] = () => new OpImageSampleExplicitLod();
            _factories[(int) Op.OpImageSampleDrefImplicitLod] = () => new OpImageSampleDrefImplicitLod();
            _factories[(int) Op.OpImageSampleDrefExplicitLod] = () => new OpImageSampleDrefExplicitLod();
            _factories[(int) Op.OpImageSampleProjImplicitLod] = () => new OpImageSampleProjImplicitLod();
            _factories[(int) Op.OpImageSampleProjExplicitLod] = () => new OpImageSampleProjExplicitLod();
            _factories[(int) Op.OpImageSampleProjDrefImplicitLod] = () => new OpImageSampleProjDrefImplicitLod();
            _factories[(int) Op.OpImageSampleProjDrefExplicitLod] = () => new OpImageSampleProjDrefExplicitLod();
            _factories[(int) Op.OpImageFetch] = () => new OpImageFetch();
            _factories[(int) Op.OpImageGather] = () => new OpImageGather();
            _factories[(int) Op.OpImageDrefGather] = () => new OpImageDrefGather();
            _factories[(int) Op.OpImageRead] = () => new OpImageRead();
            _factories[(int) Op.OpImageWrite] = () => new OpImageWrite();
            _factories[(int) Op.OpImage] = () => new OpImage();
            _factories[(int) Op.OpImageQueryFormat] = () => new OpImageQueryFormat();
            _factories[(int) Op.OpImageQueryOrder] = () => new OpImageQueryOrder();
            _factories[(int) Op.OpImageQuerySizeLod] = () => new OpImageQuerySizeLod();
            _factories[(int) Op.OpImageQuerySize] = () => new OpImageQuerySize();
            _factories[(int) Op.OpImageQueryLod] = () => new OpImageQueryLod();
            _factories[(int) Op.OpImageQueryLevels] = () => new OpImageQueryLevels();
            _factories[(int) Op.OpImageQuerySamples] = () => new OpImageQuerySamples();
            _factories[(int) Op.OpConvertFToU] = () => new OpConvertFToU();
            _factories[(int) Op.OpConvertFToS] = () => new OpConvertFToS();
            _factories[(int) Op.OpConvertSToF] = () => new OpConvertSToF();
            _factories[(int) Op.OpConvertUToF] = () => new OpConvertUToF();
            _factories[(int) Op.OpUConvert] = () => new OpUConvert();
            _factories[(int) Op.OpSConvert] = () => new OpSConvert();
            _factories[(int) Op.OpFConvert] = () => new OpFConvert();
            _factories[(int) Op.OpQuantizeToF16] = () => new OpQuantizeToF16();
            _factories[(int) Op.OpConvertPtrToU] = () => new OpConvertPtrToU();
            _factories[(int) Op.OpSatConvertSToU] = () => new OpSatConvertSToU();
            _factories[(int) Op.OpSatConvertUToS] = () => new OpSatConvertUToS();
            _factories[(int) Op.OpConvertUToPtr] = () => new OpConvertUToPtr();
            _factories[(int) Op.OpPtrCastToGeneric] = () => new OpPtrCastToGeneric();
            _factories[(int) Op.OpGenericCastToPtr] = () => new OpGenericCastToPtr();
            _factories[(int) Op.OpGenericCastToPtrExplicit] = () => new OpGenericCastToPtrExplicit();
            _factories[(int) Op.OpBitcast] = () => new OpBitcast();
            _factories[(int) Op.OpSNegate] = () => new OpSNegate();
            _factories[(int) Op.OpFNegate] = () => new OpFNegate();
            _factories[(int) Op.OpIAdd] = () => new OpIAdd();
            _factories[(int) Op.OpFAdd] = () => new OpFAdd();
            _factories[(int) Op.OpISub] = () => new OpISub();
            _factories[(int) Op.OpFSub] = () => new OpFSub();
            _factories[(int) Op.OpIMul] = () => new OpIMul();
            _factories[(int) Op.OpFMul] = () => new OpFMul();
            _factories[(int) Op.OpUDiv] = () => new OpUDiv();
            _factories[(int) Op.OpSDiv] = () => new OpSDiv();
            _factories[(int) Op.OpFDiv] = () => new OpFDiv();
            _factories[(int) Op.OpUMod] = () => new OpUMod();
            _factories[(int) Op.OpSRem] = () => new OpSRem();
            _factories[(int) Op.OpSMod] = () => new OpSMod();
            _factories[(int) Op.OpFRem] = () => new OpFRem();
            _factories[(int) Op.OpFMod] = () => new OpFMod();
            _factories[(int) Op.OpVectorTimesScalar] = () => new OpVectorTimesScalar();
            _factories[(int) Op.OpMatrixTimesScalar] = () => new OpMatrixTimesScalar();
            _factories[(int) Op.OpVectorTimesMatrix] = () => new OpVectorTimesMatrix();
            _factories[(int) Op.OpMatrixTimesVector] = () => new OpMatrixTimesVector();
            _factories[(int) Op.OpMatrixTimesMatrix] = () => new OpMatrixTimesMatrix();
            _factories[(int) Op.OpOuterProduct] = () => new OpOuterProduct();
            _factories[(int) Op.OpDot] = () => new OpDot();
            _factories[(int) Op.OpIAddCarry] = () => new OpIAddCarry();
            _factories[(int) Op.OpISubBorrow] = () => new OpISubBorrow();
            _factories[(int) Op.OpUMulExtended] = () => new OpUMulExtended();
            _factories[(int) Op.OpSMulExtended] = () => new OpSMulExtended();
            _factories[(int) Op.OpAny] = () => new OpAny();
            _factories[(int) Op.OpAll] = () => new OpAll();
            _factories[(int) Op.OpIsNan] = () => new OpIsNan();
            _factories[(int) Op.OpIsInf] = () => new OpIsInf();
            _factories[(int) Op.OpIsFinite] = () => new OpIsFinite();
            _factories[(int) Op.OpIsNormal] = () => new OpIsNormal();
            _factories[(int) Op.OpSignBitSet] = () => new OpSignBitSet();
            _factories[(int) Op.OpLessOrGreater] = () => new OpLessOrGreater();
            _factories[(int) Op.OpOrdered] = () => new OpOrdered();
            _factories[(int) Op.OpUnordered] = () => new OpUnordered();
            _factories[(int) Op.OpLogicalEqual] = () => new OpLogicalEqual();
            _factories[(int) Op.OpLogicalNotEqual] = () => new OpLogicalNotEqual();
            _factories[(int) Op.OpLogicalOr] = () => new OpLogicalOr();
            _factories[(int) Op.OpLogicalAnd] = () => new OpLogicalAnd();
            _factories[(int) Op.OpLogicalNot] = () => new OpLogicalNot();
            _factories[(int) Op.OpSelect] = () => new OpSelect();
            _factories[(int) Op.OpIEqual] = () => new OpIEqual();
            _factories[(int) Op.OpINotEqual] = () => new OpINotEqual();
            _factories[(int) Op.OpUGreaterThan] = () => new OpUGreaterThan();
            _factories[(int) Op.OpSGreaterThan] = () => new OpSGreaterThan();
            _factories[(int) Op.OpUGreaterThanEqual] = () => new OpUGreaterThanEqual();
            _factories[(int) Op.OpSGreaterThanEqual] = () => new OpSGreaterThanEqual();
            _factories[(int) Op.OpULessThan] = () => new OpULessThan();
            _factories[(int) Op.OpSLessThan] = () => new OpSLessThan();
            _factories[(int) Op.OpULessThanEqual] = () => new OpULessThanEqual();
            _factories[(int) Op.OpSLessThanEqual] = () => new OpSLessThanEqual();
            _factories[(int) Op.OpFOrdEqual] = () => new OpFOrdEqual();
            _factories[(int) Op.OpFUnordEqual] = () => new OpFUnordEqual();
            _factories[(int) Op.OpFOrdNotEqual] = () => new OpFOrdNotEqual();
            _factories[(int) Op.OpFUnordNotEqual] = () => new OpFUnordNotEqual();
            _factories[(int) Op.OpFOrdLessThan] = () => new OpFOrdLessThan();
            _factories[(int) Op.OpFUnordLessThan] = () => new OpFUnordLessThan();
            _factories[(int) Op.OpFOrdGreaterThan] = () => new OpFOrdGreaterThan();
            _factories[(int) Op.OpFUnordGreaterThan] = () => new OpFUnordGreaterThan();
            _factories[(int) Op.OpFOrdLessThanEqual] = () => new OpFOrdLessThanEqual();
            _factories[(int) Op.OpFUnordLessThanEqual] = () => new OpFUnordLessThanEqual();
            _factories[(int) Op.OpFOrdGreaterThanEqual] = () => new OpFOrdGreaterThanEqual();
            _factories[(int) Op.OpFUnordGreaterThanEqual] = () => new OpFUnordGreaterThanEqual();
            _factories[(int) Op.OpShiftRightLogical] = () => new OpShiftRightLogical();
            _factories[(int) Op.OpShiftRightArithmetic] = () => new OpShiftRightArithmetic();
            _factories[(int) Op.OpShiftLeftLogical] = () => new OpShiftLeftLogical();
            _factories[(int) Op.OpBitwiseOr] = () => new OpBitwiseOr();
            _factories[(int) Op.OpBitwiseXor] = () => new OpBitwiseXor();
            _factories[(int) Op.OpBitwiseAnd] = () => new OpBitwiseAnd();
            _factories[(int) Op.OpNot] = () => new OpNot();
            _factories[(int) Op.OpBitFieldInsert] = () => new OpBitFieldInsert();
            _factories[(int) Op.OpBitFieldSExtract] = () => new OpBitFieldSExtract();
            _factories[(int) Op.OpBitFieldUExtract] = () => new OpBitFieldUExtract();
            _factories[(int) Op.OpBitReverse] = () => new OpBitReverse();
            _factories[(int) Op.OpBitCount] = () => new OpBitCount();
            _factories[(int) Op.OpDPdx] = () => new OpDPdx();
            _factories[(int) Op.OpDPdy] = () => new OpDPdy();
            _factories[(int) Op.OpFwidth] = () => new OpFwidth();
            _factories[(int) Op.OpDPdxFine] = () => new OpDPdxFine();
            _factories[(int) Op.OpDPdyFine] = () => new OpDPdyFine();
            _factories[(int) Op.OpFwidthFine] = () => new OpFwidthFine();
            _factories[(int) Op.OpDPdxCoarse] = () => new OpDPdxCoarse();
            _factories[(int) Op.OpDPdyCoarse] = () => new OpDPdyCoarse();
            _factories[(int) Op.OpFwidthCoarse] = () => new OpFwidthCoarse();
            _factories[(int) Op.OpEmitVertex] = () => new OpEmitVertex();
            _factories[(int) Op.OpEndPrimitive] = () => new OpEndPrimitive();
            _factories[(int) Op.OpEmitStreamVertex] = () => new OpEmitStreamVertex();
            _factories[(int) Op.OpEndStreamPrimitive] = () => new OpEndStreamPrimitive();
            _factories[(int) Op.OpControlBarrier] = () => new OpControlBarrier();
            _factories[(int) Op.OpMemoryBarrier] = () => new OpMemoryBarrier();
            _factories[(int) Op.OpAtomicLoad] = () => new OpAtomicLoad();
            _factories[(int) Op.OpAtomicStore] = () => new OpAtomicStore();
            _factories[(int) Op.OpAtomicExchange] = () => new OpAtomicExchange();
            _factories[(int) Op.OpAtomicCompareExchange] = () => new OpAtomicCompareExchange();
            _factories[(int) Op.OpAtomicCompareExchangeWeak] = () => new OpAtomicCompareExchangeWeak();
            _factories[(int) Op.OpAtomicIIncrement] = () => new OpAtomicIIncrement();
            _factories[(int) Op.OpAtomicIDecrement] = () => new OpAtomicIDecrement();
            _factories[(int) Op.OpAtomicIAdd] = () => new OpAtomicIAdd();
            _factories[(int) Op.OpAtomicISub] = () => new OpAtomicISub();
            _factories[(int) Op.OpAtomicSMin] = () => new OpAtomicSMin();
            _factories[(int) Op.OpAtomicUMin] = () => new OpAtomicUMin();
            _factories[(int) Op.OpAtomicSMax] = () => new OpAtomicSMax();
            _factories[(int) Op.OpAtomicUMax] = () => new OpAtomicUMax();
            _factories[(int) Op.OpAtomicAnd] = () => new OpAtomicAnd();
            _factories[(int) Op.OpAtomicOr] = () => new OpAtomicOr();
            _factories[(int) Op.OpAtomicXor] = () => new OpAtomicXor();
            _factories[(int) Op.OpPhi] = () => new OpPhi();
            _factories[(int) Op.OpLoopMerge] = () => new OpLoopMerge();
            _factories[(int) Op.OpSelectionMerge] = () => new OpSelectionMerge();
            _factories[(int) Op.OpLabel] = () => new OpLabel();
            _factories[(int) Op.OpBranch] = () => new OpBranch();
            _factories[(int) Op.OpBranchConditional] = () => new OpBranchConditional();
            _factories[(int) Op.OpSwitch] = () => new OpSwitch();
            _factories[(int) Op.OpKill] = () => new OpKill();
            _factories[(int) Op.OpReturn] = () => new OpReturn();
            _factories[(int) Op.OpReturnValue] = () => new OpReturnValue();
            _factories[(int) Op.OpUnreachable] = () => new OpUnreachable();
            _factories[(int) Op.OpLifetimeStart] = () => new OpLifetimeStart();
            _factories[(int) Op.OpLifetimeStop] = () => new OpLifetimeStop();
            _factories[(int) Op.OpGroupAsyncCopy] = () => new OpGroupAsyncCopy();
            _factories[(int) Op.OpGroupWaitEvents] = () => new OpGroupWaitEvents();
            _factories[(int) Op.OpGroupAll] = () => new OpGroupAll();
            _factories[(int) Op.OpGroupAny] = () => new OpGroupAny();
            _factories[(int) Op.OpGroupBroadcast] = () => new OpGroupBroadcast();
            _factories[(int) Op.OpGroupIAdd] = () => new OpGroupIAdd();
            _factories[(int) Op.OpGroupFAdd] = () => new OpGroupFAdd();
            _factories[(int) Op.OpGroupFMin] = () => new OpGroupFMin();
            _factories[(int) Op.OpGroupUMin] = () => new OpGroupUMin();
            _factories[(int) Op.OpGroupSMin] = () => new OpGroupSMin();
            _factories[(int) Op.OpGroupFMax] = () => new OpGroupFMax();
            _factories[(int) Op.OpGroupUMax] = () => new OpGroupUMax();
            _factories[(int) Op.OpGroupSMax] = () => new OpGroupSMax();
            _factories[(int) Op.OpReadPipe] = () => new OpReadPipe();
            _factories[(int) Op.OpWritePipe] = () => new OpWritePipe();
            _factories[(int) Op.OpReservedReadPipe] = () => new OpReservedReadPipe();
            _factories[(int) Op.OpReservedWritePipe] = () => new OpReservedWritePipe();
            _factories[(int) Op.OpReserveReadPipePackets] = () => new OpReserveReadPipePackets();
            _factories[(int) Op.OpReserveWritePipePackets] = () => new OpReserveWritePipePackets();
            _factories[(int) Op.OpCommitReadPipe] = () => new OpCommitReadPipe();
            _factories[(int) Op.OpCommitWritePipe] = () => new OpCommitWritePipe();
            _factories[(int) Op.OpIsValidReserveId] = () => new OpIsValidReserveId();
            _factories[(int) Op.OpGetNumPipePackets] = () => new OpGetNumPipePackets();
            _factories[(int) Op.OpGetMaxPipePackets] = () => new OpGetMaxPipePackets();
            _factories[(int) Op.OpGroupReserveReadPipePackets] = () => new OpGroupReserveReadPipePackets();
            _factories[(int) Op.OpGroupReserveWritePipePackets] = () => new OpGroupReserveWritePipePackets();
            _factories[(int) Op.OpGroupCommitReadPipe] = () => new OpGroupCommitReadPipe();
            _factories[(int) Op.OpGroupCommitWritePipe] = () => new OpGroupCommitWritePipe();
            _factories[(int) Op.OpEnqueueMarker] = () => new OpEnqueueMarker();
            _factories[(int) Op.OpEnqueueKernel] = () => new OpEnqueueKernel();
            _factories[(int) Op.OpGetKernelNDrangeSubGroupCount] = () => new OpGetKernelNDrangeSubGroupCount();
            _factories[(int) Op.OpGetKernelNDrangeMaxSubGroupSize] = () => new OpGetKernelNDrangeMaxSubGroupSize();
            _factories[(int) Op.OpGetKernelWorkGroupSize] = () => new OpGetKernelWorkGroupSize();
            _factories[(int) Op.OpGetKernelPreferredWorkGroupSizeMultiple] =
                () => new OpGetKernelPreferredWorkGroupSizeMultiple();
            _factories[(int) Op.OpRetainEvent] = () => new OpRetainEvent();
            _factories[(int) Op.OpReleaseEvent] = () => new OpReleaseEvent();
            _factories[(int) Op.OpCreateUserEvent] = () => new OpCreateUserEvent();
            _factories[(int) Op.OpIsValidEvent] = () => new OpIsValidEvent();
            _factories[(int) Op.OpSetUserEventStatus] = () => new OpSetUserEventStatus();
            _factories[(int) Op.OpCaptureEventProfilingInfo] = () => new OpCaptureEventProfilingInfo();
            _factories[(int) Op.OpGetDefaultQueue] = () => new OpGetDefaultQueue();
            _factories[(int) Op.OpBuildNDRange] = () => new OpBuildNDRange();
            _factories[(int) Op.OpImageSparseSampleImplicitLod] = () => new OpImageSparseSampleImplicitLod();
            _factories[(int) Op.OpImageSparseSampleExplicitLod] = () => new OpImageSparseSampleExplicitLod();
            _factories[(int) Op.OpImageSparseSampleDrefImplicitLod] = () => new OpImageSparseSampleDrefImplicitLod();
            _factories[(int) Op.OpImageSparseSampleDrefExplicitLod] = () => new OpImageSparseSampleDrefExplicitLod();
            _factories[(int) Op.OpImageSparseSampleProjImplicitLod] = () => new OpImageSparseSampleProjImplicitLod();
            _factories[(int) Op.OpImageSparseSampleProjExplicitLod] = () => new OpImageSparseSampleProjExplicitLod();
            _factories[(int) Op.OpImageSparseSampleProjDrefImplicitLod] =
                () => new OpImageSparseSampleProjDrefImplicitLod();
            _factories[(int) Op.OpImageSparseSampleProjDrefExplicitLod] =
                () => new OpImageSparseSampleProjDrefExplicitLod();
            _factories[(int) Op.OpImageSparseFetch] = () => new OpImageSparseFetch();
            _factories[(int) Op.OpImageSparseGather] = () => new OpImageSparseGather();
            _factories[(int) Op.OpImageSparseDrefGather] = () => new OpImageSparseDrefGather();
            _factories[(int) Op.OpImageSparseTexelsResident] = () => new OpImageSparseTexelsResident();
            _factories[(int) Op.OpNoLine] = () => new OpNoLine();
            _factories[(int) Op.OpAtomicFlagTestAndSet] = () => new OpAtomicFlagTestAndSet();
            _factories[(int) Op.OpAtomicFlagClear] = () => new OpAtomicFlagClear();
            _factories[(int) Op.OpImageSparseRead] = () => new OpImageSparseRead();
            _factories[(int) Op.OpDecorateId] = () => new OpDecorateId();
            _factories[(int) Op.OpSubgroupBallotKHR] = () => new OpSubgroupBallotKHR();
            _factories[(int) Op.OpSubgroupFirstInvocationKHR] = () => new OpSubgroupFirstInvocationKHR();
            _factories[(int) Op.OpSubgroupAllKHR] = () => new OpSubgroupAllKHR();
            _factories[(int) Op.OpSubgroupAnyKHR] = () => new OpSubgroupAnyKHR();
            _factories[(int) Op.OpSubgroupAllEqualKHR] = () => new OpSubgroupAllEqualKHR();
            _factories[(int) Op.OpSubgroupReadInvocationKHR] = () => new OpSubgroupReadInvocationKHR();
            _factories[(int) Op.OpGroupIAddNonUniformAMD] = () => new OpGroupIAddNonUniformAMD();
            _factories[(int) Op.OpGroupFAddNonUniformAMD] = () => new OpGroupFAddNonUniformAMD();
            _factories[(int) Op.OpGroupFMinNonUniformAMD] = () => new OpGroupFMinNonUniformAMD();
            _factories[(int) Op.OpGroupUMinNonUniformAMD] = () => new OpGroupUMinNonUniformAMD();
            _factories[(int) Op.OpGroupSMinNonUniformAMD] = () => new OpGroupSMinNonUniformAMD();
            _factories[(int) Op.OpGroupFMaxNonUniformAMD] = () => new OpGroupFMaxNonUniformAMD();
            _factories[(int) Op.OpGroupUMaxNonUniformAMD] = () => new OpGroupUMaxNonUniformAMD();
            _factories[(int) Op.OpGroupSMaxNonUniformAMD] = () => new OpGroupSMaxNonUniformAMD();
            _factories[(int) Op.OpFragmentMaskFetchAMD] = () => new OpFragmentMaskFetchAMD();
            _factories[(int) Op.OpFragmentFetchAMD] = () => new OpFragmentFetchAMD();
            _factories[(int) Op.OpSubgroupShuffleINTEL] = () => new OpSubgroupShuffleINTEL();
            _factories[(int) Op.OpSubgroupShuffleDownINTEL] = () => new OpSubgroupShuffleDownINTEL();
            _factories[(int) Op.OpSubgroupShuffleUpINTEL] = () => new OpSubgroupShuffleUpINTEL();
            _factories[(int) Op.OpSubgroupShuffleXorINTEL] = () => new OpSubgroupShuffleXorINTEL();
            _factories[(int) Op.OpSubgroupBlockReadINTEL] = () => new OpSubgroupBlockReadINTEL();
            _factories[(int) Op.OpSubgroupBlockWriteINTEL] = () => new OpSubgroupBlockWriteINTEL();
            _factories[(int) Op.OpSubgroupImageBlockReadINTEL] = () => new OpSubgroupImageBlockReadINTEL();
            _factories[(int) Op.OpSubgroupImageBlockWriteINTEL] = () => new OpSubgroupImageBlockWriteINTEL();
            _factories[(int) Op.OpDecorateStringGOOGLE] = () => new OpDecorateStringGOOGLE();
            _factories[(int) Op.OpMemberDecorateStringGOOGLE] = () => new OpMemberDecorateStringGOOGLE();

            #endregion
        }

        public static Instruction Parse(WordReader reader)
        {
            var pos = reader.Position;
            var opCode = reader.ReadWord();
            var op = (Op) (opCode & 0x0FFFF);
            var wordCount = (opCode >> 16) & 0x0FFFF;
            var end = pos + wordCount;
            var instruction = Create(op);
            instruction.Parse(reader, wordCount);
            if (reader.Position != end) throw new FormatException();

            return instruction;
        }

        public static Instruction Create(Op op)
        {
            var factory = _factories[(int) op];
            if (factory != null)
                return factory();
            throw new NotImplementedException("Factory isn't implemented for " + op);
        }
    }
}