using System;
using Toe.SPIRV.Instructions;
using Toe.SPIRV.Reflection.Nodes;
using Toe.SPIRV.Reflection.Types;
using Toe.SPIRV.Spv;

namespace Toe.SPIRV.Reflection
{
    public static class NodeFactory
    {
        private static readonly Func<Node>[] _factories;

        static NodeFactory()
        {
            _factories = new Func<Node>[6033];
            _factories[(int)Op.OpNop] = () => new Nodes.Nop();
            _factories[(int)Op.OpUndef] = () => new Nodes.Undef();
            _factories[(int)Op.OpSourceContinued] = () => new Nodes.SourceContinued();
            _factories[(int)Op.OpSource] = () => new Nodes.Source();
            _factories[(int)Op.OpSourceExtension] = () => new Nodes.SourceExtension();
            _factories[(int)Op.OpName] = () => new Nodes.Name();
            _factories[(int)Op.OpMemberName] = () => new Nodes.MemberName();
            _factories[(int)Op.OpString] = () => new Nodes.String();
            _factories[(int)Op.OpLine] = () => new Nodes.Line();
            _factories[(int)Op.OpExtension] = () => new Nodes.Extension();
            _factories[(int)Op.OpExtInstImport] = () => new Nodes.ExtInstImport();
            _factories[(int)Op.OpExtInst] = () => new Nodes.ExtInst();
            _factories[(int)Op.OpMemoryModel] = () => new Nodes.MemoryModel();
            _factories[(int)Op.OpEntryPoint] = () => new Nodes.EntryPoint();
            _factories[(int)Op.OpExecutionMode] = () => new Nodes.ExecutionMode();
            _factories[(int)Op.OpCapability] = () => new Nodes.Capability();
            _factories[(int)Op.OpTypeVoid] = () => throw new NotImplementedException($"Can't create instance of OpTypeVoid node. Use {nameof(SpirvTypeBase)} to resolve type instance.");
            _factories[(int)Op.OpTypeBool] = () => throw new NotImplementedException($"Can't create instance of OpTypeBool node. Use {nameof(SpirvTypeBase)} to resolve type instance.");
            _factories[(int)Op.OpTypeInt] = () => throw new NotImplementedException($"Can't create instance of OpTypeInt node. Use {nameof(SpirvTypeBase)} to resolve type instance.");
            _factories[(int)Op.OpTypeFloat] = () => throw new NotImplementedException($"Can't create instance of OpTypeFloat node. Use {nameof(SpirvTypeBase)} to resolve type instance.");
            _factories[(int)Op.OpTypeVector] = () => throw new NotImplementedException($"Can't create instance of OpTypeVector node. Use {nameof(SpirvTypeBase)} to resolve type instance.");
            _factories[(int)Op.OpTypeMatrix] = () => throw new NotImplementedException($"Can't create instance of OpTypeMatrix node. Use {nameof(SpirvTypeBase)} to resolve type instance.");
            _factories[(int)Op.OpTypeImage] = () => new Types.TypeImage();
            _factories[(int)Op.OpTypeSampler] = () => new Types.TypeSampler();
            _factories[(int)Op.OpTypeSampledImage] = () => new Types.TypeSampledImage();
            _factories[(int)Op.OpTypeArray] = () => new Types.TypeArray();
            _factories[(int)Op.OpTypeRuntimeArray] = () => new Types.TypeRuntimeArray();
            _factories[(int)Op.OpTypeStruct] = () => new Types.TypeStruct();
            _factories[(int)Op.OpTypeOpaque] = () => new Types.TypeOpaque();
            _factories[(int)Op.OpTypePointer] = () => new Types.TypePointer();
            _factories[(int)Op.OpTypeFunction] = () => new Types.TypeFunction();
            _factories[(int)Op.OpTypeEvent] = () => new Types.TypeEvent();
            _factories[(int)Op.OpTypeDeviceEvent] = () => new Types.TypeDeviceEvent();
            _factories[(int)Op.OpTypeReserveId] = () => new Types.TypeReserveId();
            _factories[(int)Op.OpTypeQueue] = () => new Types.TypeQueue();
            _factories[(int)Op.OpTypePipe] = () => new Types.TypePipe();
            _factories[(int)Op.OpTypeForwardPointer] = () => new Types.TypeForwardPointer();
            _factories[(int)Op.OpConstantTrue] = () => new Nodes.ConstantTrue();
            _factories[(int)Op.OpConstantFalse] = () => new Nodes.ConstantFalse();
            _factories[(int)Op.OpConstant] = () => new Nodes.Constant();
            _factories[(int)Op.OpConstantComposite] = () => new Nodes.ConstantComposite();
            _factories[(int)Op.OpConstantSampler] = () => new Nodes.ConstantSampler();
            _factories[(int)Op.OpConstantNull] = () => new Nodes.ConstantNull();
            _factories[(int)Op.OpSpecConstantTrue] = () => new Nodes.SpecConstantTrue();
            _factories[(int)Op.OpSpecConstantFalse] = () => new Nodes.SpecConstantFalse();
            _factories[(int)Op.OpSpecConstant] = () => new Nodes.SpecConstant();
            _factories[(int)Op.OpSpecConstantComposite] = () => new Nodes.SpecConstantComposite();
            _factories[(int)Op.OpSpecConstantOp] = () => new Nodes.SpecConstantOp();
            _factories[(int)Op.OpFunction] = () => new Nodes.Function();
            _factories[(int)Op.OpFunctionParameter] = () => new Nodes.FunctionParameter();
            _factories[(int)Op.OpFunctionEnd] = () => new Nodes.FunctionEnd();
            _factories[(int)Op.OpFunctionCall] = () => new Nodes.FunctionCall();
            _factories[(int)Op.OpVariable] = () => new Nodes.Variable();
            _factories[(int)Op.OpImageTexelPointer] = () => new Nodes.ImageTexelPointer();
            _factories[(int)Op.OpLoad] = () => new Nodes.Load();
            _factories[(int)Op.OpStore] = () => new Nodes.Store();
            _factories[(int)Op.OpCopyMemory] = () => new Nodes.CopyMemory();
            _factories[(int)Op.OpCopyMemorySized] = () => new Nodes.CopyMemorySized();
            _factories[(int)Op.OpAccessChain] = () => new Nodes.AccessChain();
            _factories[(int)Op.OpInBoundsAccessChain] = () => new Nodes.InBoundsAccessChain();
            _factories[(int)Op.OpPtrAccessChain] = () => new Nodes.PtrAccessChain();
            _factories[(int)Op.OpArrayLength] = () => new Nodes.ArrayLength();
            _factories[(int)Op.OpGenericPtrMemSemantics] = () => new Nodes.GenericPtrMemSemantics();
            _factories[(int)Op.OpInBoundsPtrAccessChain] = () => new Nodes.InBoundsPtrAccessChain();
            _factories[(int)Op.OpDecorate] = () => new Nodes.Decorate();
            _factories[(int)Op.OpMemberDecorate] = () => new Nodes.MemberDecorate();
            _factories[(int)Op.OpDecorationGroup] = () => new Nodes.DecorationGroup();
            _factories[(int)Op.OpGroupDecorate] = () => new Nodes.GroupDecorate();
            _factories[(int)Op.OpGroupMemberDecorate] = () => new Nodes.GroupMemberDecorate();
            _factories[(int)Op.OpVectorExtractDynamic] = () => new Nodes.VectorExtractDynamic();
            _factories[(int)Op.OpVectorInsertDynamic] = () => new Nodes.VectorInsertDynamic();
            _factories[(int)Op.OpVectorShuffle] = () => new Nodes.VectorShuffle();
            _factories[(int)Op.OpCompositeConstruct] = () => new Nodes.CompositeConstruct();
            _factories[(int)Op.OpCompositeExtract] = () => new Nodes.CompositeExtract();
            _factories[(int)Op.OpCompositeInsert] = () => new Nodes.CompositeInsert();
            _factories[(int)Op.OpCopyObject] = () => new Nodes.CopyObject();
            _factories[(int)Op.OpTranspose] = () => new Nodes.Transpose();
            _factories[(int)Op.OpSampledImage] = () => new Nodes.SampledImage();
            _factories[(int)Op.OpImageSampleImplicitLod] = () => new Nodes.ImageSampleImplicitLod();
            _factories[(int)Op.OpImageSampleExplicitLod] = () => new Nodes.ImageSampleExplicitLod();
            _factories[(int)Op.OpImageSampleDrefImplicitLod] = () => new Nodes.ImageSampleDrefImplicitLod();
            _factories[(int)Op.OpImageSampleDrefExplicitLod] = () => new Nodes.ImageSampleDrefExplicitLod();
            _factories[(int)Op.OpImageSampleProjImplicitLod] = () => new Nodes.ImageSampleProjImplicitLod();
            _factories[(int)Op.OpImageSampleProjExplicitLod] = () => new Nodes.ImageSampleProjExplicitLod();
            _factories[(int)Op.OpImageSampleProjDrefImplicitLod] = () => new Nodes.ImageSampleProjDrefImplicitLod();
            _factories[(int)Op.OpImageSampleProjDrefExplicitLod] = () => new Nodes.ImageSampleProjDrefExplicitLod();
            _factories[(int)Op.OpImageFetch] = () => new Nodes.ImageFetch();
            _factories[(int)Op.OpImageGather] = () => new Nodes.ImageGather();
            _factories[(int)Op.OpImageDrefGather] = () => new Nodes.ImageDrefGather();
            _factories[(int)Op.OpImageRead] = () => new Nodes.ImageRead();
            _factories[(int)Op.OpImageWrite] = () => new Nodes.ImageWrite();
            _factories[(int)Op.OpImage] = () => new Nodes.Image();
            _factories[(int)Op.OpImageQueryFormat] = () => new Nodes.ImageQueryFormat();
            _factories[(int)Op.OpImageQueryOrder] = () => new Nodes.ImageQueryOrder();
            _factories[(int)Op.OpImageQuerySizeLod] = () => new Nodes.ImageQuerySizeLod();
            _factories[(int)Op.OpImageQuerySize] = () => new Nodes.ImageQuerySize();
            _factories[(int)Op.OpImageQueryLod] = () => new Nodes.ImageQueryLod();
            _factories[(int)Op.OpImageQueryLevels] = () => new Nodes.ImageQueryLevels();
            _factories[(int)Op.OpImageQuerySamples] = () => new Nodes.ImageQuerySamples();
            _factories[(int)Op.OpConvertFToU] = () => new Nodes.ConvertFToU();
            _factories[(int)Op.OpConvertFToS] = () => new Nodes.ConvertFToS();
            _factories[(int)Op.OpConvertSToF] = () => new Nodes.ConvertSToF();
            _factories[(int)Op.OpConvertUToF] = () => new Nodes.ConvertUToF();
            _factories[(int)Op.OpUConvert] = () => new Nodes.UConvert();
            _factories[(int)Op.OpSConvert] = () => new Nodes.SConvert();
            _factories[(int)Op.OpFConvert] = () => new Nodes.FConvert();
            _factories[(int)Op.OpQuantizeToF16] = () => new Nodes.QuantizeToF16();
            _factories[(int)Op.OpConvertPtrToU] = () => new Nodes.ConvertPtrToU();
            _factories[(int)Op.OpSatConvertSToU] = () => new Nodes.SatConvertSToU();
            _factories[(int)Op.OpSatConvertUToS] = () => new Nodes.SatConvertUToS();
            _factories[(int)Op.OpConvertUToPtr] = () => new Nodes.ConvertUToPtr();
            _factories[(int)Op.OpPtrCastToGeneric] = () => new Nodes.PtrCastToGeneric();
            _factories[(int)Op.OpGenericCastToPtr] = () => new Nodes.GenericCastToPtr();
            _factories[(int)Op.OpGenericCastToPtrExplicit] = () => new Nodes.GenericCastToPtrExplicit();
            _factories[(int)Op.OpBitcast] = () => new Nodes.Bitcast();
            _factories[(int)Op.OpSNegate] = () => new Nodes.SNegate();
            _factories[(int)Op.OpFNegate] = () => new Nodes.FNegate();
            _factories[(int)Op.OpIAdd] = () => new Nodes.IAdd();
            _factories[(int)Op.OpFAdd] = () => new Nodes.FAdd();
            _factories[(int)Op.OpISub] = () => new Nodes.ISub();
            _factories[(int)Op.OpFSub] = () => new Nodes.FSub();
            _factories[(int)Op.OpIMul] = () => new Nodes.IMul();
            _factories[(int)Op.OpFMul] = () => new Nodes.FMul();
            _factories[(int)Op.OpUDiv] = () => new Nodes.UDiv();
            _factories[(int)Op.OpSDiv] = () => new Nodes.SDiv();
            _factories[(int)Op.OpFDiv] = () => new Nodes.FDiv();
            _factories[(int)Op.OpUMod] = () => new Nodes.UMod();
            _factories[(int)Op.OpSRem] = () => new Nodes.SRem();
            _factories[(int)Op.OpSMod] = () => new Nodes.SMod();
            _factories[(int)Op.OpFRem] = () => new Nodes.FRem();
            _factories[(int)Op.OpFMod] = () => new Nodes.FMod();
            _factories[(int)Op.OpVectorTimesScalar] = () => new Nodes.VectorTimesScalar();
            _factories[(int)Op.OpMatrixTimesScalar] = () => new Nodes.MatrixTimesScalar();
            _factories[(int)Op.OpVectorTimesMatrix] = () => new Nodes.VectorTimesMatrix();
            _factories[(int)Op.OpMatrixTimesVector] = () => new Nodes.MatrixTimesVector();
            _factories[(int)Op.OpMatrixTimesMatrix] = () => new Nodes.MatrixTimesMatrix();
            _factories[(int)Op.OpOuterProduct] = () => new Nodes.OuterProduct();
            _factories[(int)Op.OpDot] = () => new Nodes.Dot();
            _factories[(int)Op.OpIAddCarry] = () => new Nodes.IAddCarry();
            _factories[(int)Op.OpISubBorrow] = () => new Nodes.ISubBorrow();
            _factories[(int)Op.OpUMulExtended] = () => new Nodes.UMulExtended();
            _factories[(int)Op.OpSMulExtended] = () => new Nodes.SMulExtended();
            _factories[(int)Op.OpAny] = () => new Nodes.Any();
            _factories[(int)Op.OpAll] = () => new Nodes.All();
            _factories[(int)Op.OpIsNan] = () => new Nodes.IsNan();
            _factories[(int)Op.OpIsInf] = () => new Nodes.IsInf();
            _factories[(int)Op.OpIsFinite] = () => new Nodes.IsFinite();
            _factories[(int)Op.OpIsNormal] = () => new Nodes.IsNormal();
            _factories[(int)Op.OpSignBitSet] = () => new Nodes.SignBitSet();
            _factories[(int)Op.OpLessOrGreater] = () => new Nodes.LessOrGreater();
            _factories[(int)Op.OpOrdered] = () => new Nodes.Ordered();
            _factories[(int)Op.OpUnordered] = () => new Nodes.Unordered();
            _factories[(int)Op.OpLogicalEqual] = () => new Nodes.LogicalEqual();
            _factories[(int)Op.OpLogicalNotEqual] = () => new Nodes.LogicalNotEqual();
            _factories[(int)Op.OpLogicalOr] = () => new Nodes.LogicalOr();
            _factories[(int)Op.OpLogicalAnd] = () => new Nodes.LogicalAnd();
            _factories[(int)Op.OpLogicalNot] = () => new Nodes.LogicalNot();
            _factories[(int)Op.OpSelect] = () => new Nodes.Select();
            _factories[(int)Op.OpIEqual] = () => new Nodes.IEqual();
            _factories[(int)Op.OpINotEqual] = () => new Nodes.INotEqual();
            _factories[(int)Op.OpUGreaterThan] = () => new Nodes.UGreaterThan();
            _factories[(int)Op.OpSGreaterThan] = () => new Nodes.SGreaterThan();
            _factories[(int)Op.OpUGreaterThanEqual] = () => new Nodes.UGreaterThanEqual();
            _factories[(int)Op.OpSGreaterThanEqual] = () => new Nodes.SGreaterThanEqual();
            _factories[(int)Op.OpULessThan] = () => new Nodes.ULessThan();
            _factories[(int)Op.OpSLessThan] = () => new Nodes.SLessThan();
            _factories[(int)Op.OpULessThanEqual] = () => new Nodes.ULessThanEqual();
            _factories[(int)Op.OpSLessThanEqual] = () => new Nodes.SLessThanEqual();
            _factories[(int)Op.OpFOrdEqual] = () => new Nodes.FOrdEqual();
            _factories[(int)Op.OpFUnordEqual] = () => new Nodes.FUnordEqual();
            _factories[(int)Op.OpFOrdNotEqual] = () => new Nodes.FOrdNotEqual();
            _factories[(int)Op.OpFUnordNotEqual] = () => new Nodes.FUnordNotEqual();
            _factories[(int)Op.OpFOrdLessThan] = () => new Nodes.FOrdLessThan();
            _factories[(int)Op.OpFUnordLessThan] = () => new Nodes.FUnordLessThan();
            _factories[(int)Op.OpFOrdGreaterThan] = () => new Nodes.FOrdGreaterThan();
            _factories[(int)Op.OpFUnordGreaterThan] = () => new Nodes.FUnordGreaterThan();
            _factories[(int)Op.OpFOrdLessThanEqual] = () => new Nodes.FOrdLessThanEqual();
            _factories[(int)Op.OpFUnordLessThanEqual] = () => new Nodes.FUnordLessThanEqual();
            _factories[(int)Op.OpFOrdGreaterThanEqual] = () => new Nodes.FOrdGreaterThanEqual();
            _factories[(int)Op.OpFUnordGreaterThanEqual] = () => new Nodes.FUnordGreaterThanEqual();
            _factories[(int)Op.OpShiftRightLogical] = () => new Nodes.ShiftRightLogical();
            _factories[(int)Op.OpShiftRightArithmetic] = () => new Nodes.ShiftRightArithmetic();
            _factories[(int)Op.OpShiftLeftLogical] = () => new Nodes.ShiftLeftLogical();
            _factories[(int)Op.OpBitwiseOr] = () => new Nodes.BitwiseOr();
            _factories[(int)Op.OpBitwiseXor] = () => new Nodes.BitwiseXor();
            _factories[(int)Op.OpBitwiseAnd] = () => new Nodes.BitwiseAnd();
            _factories[(int)Op.OpNot] = () => new Nodes.Not();
            _factories[(int)Op.OpBitFieldInsert] = () => new Nodes.BitFieldInsert();
            _factories[(int)Op.OpBitFieldSExtract] = () => new Nodes.BitFieldSExtract();
            _factories[(int)Op.OpBitFieldUExtract] = () => new Nodes.BitFieldUExtract();
            _factories[(int)Op.OpBitReverse] = () => new Nodes.BitReverse();
            _factories[(int)Op.OpBitCount] = () => new Nodes.BitCount();
            _factories[(int)Op.OpDPdx] = () => new Nodes.DPdx();
            _factories[(int)Op.OpDPdy] = () => new Nodes.DPdy();
            _factories[(int)Op.OpFwidth] = () => new Nodes.Fwidth();
            _factories[(int)Op.OpDPdxFine] = () => new Nodes.DPdxFine();
            _factories[(int)Op.OpDPdyFine] = () => new Nodes.DPdyFine();
            _factories[(int)Op.OpFwidthFine] = () => new Nodes.FwidthFine();
            _factories[(int)Op.OpDPdxCoarse] = () => new Nodes.DPdxCoarse();
            _factories[(int)Op.OpDPdyCoarse] = () => new Nodes.DPdyCoarse();
            _factories[(int)Op.OpFwidthCoarse] = () => new Nodes.FwidthCoarse();
            _factories[(int)Op.OpEmitVertex] = () => new Nodes.EmitVertex();
            _factories[(int)Op.OpEndPrimitive] = () => new Nodes.EndPrimitive();
            _factories[(int)Op.OpEmitStreamVertex] = () => new Nodes.EmitStreamVertex();
            _factories[(int)Op.OpEndStreamPrimitive] = () => new Nodes.EndStreamPrimitive();
            _factories[(int)Op.OpControlBarrier] = () => new Nodes.ControlBarrier();
            _factories[(int)Op.OpMemoryBarrier] = () => new Nodes.MemoryBarrier();
            _factories[(int)Op.OpAtomicLoad] = () => new Nodes.AtomicLoad();
            _factories[(int)Op.OpAtomicStore] = () => new Nodes.AtomicStore();
            _factories[(int)Op.OpAtomicExchange] = () => new Nodes.AtomicExchange();
            _factories[(int)Op.OpAtomicCompareExchange] = () => new Nodes.AtomicCompareExchange();
            _factories[(int)Op.OpAtomicCompareExchangeWeak] = () => new Nodes.AtomicCompareExchangeWeak();
            _factories[(int)Op.OpAtomicIIncrement] = () => new Nodes.AtomicIIncrement();
            _factories[(int)Op.OpAtomicIDecrement] = () => new Nodes.AtomicIDecrement();
            _factories[(int)Op.OpAtomicIAdd] = () => new Nodes.AtomicIAdd();
            _factories[(int)Op.OpAtomicISub] = () => new Nodes.AtomicISub();
            _factories[(int)Op.OpAtomicSMin] = () => new Nodes.AtomicSMin();
            _factories[(int)Op.OpAtomicUMin] = () => new Nodes.AtomicUMin();
            _factories[(int)Op.OpAtomicSMax] = () => new Nodes.AtomicSMax();
            _factories[(int)Op.OpAtomicUMax] = () => new Nodes.AtomicUMax();
            _factories[(int)Op.OpAtomicAnd] = () => new Nodes.AtomicAnd();
            _factories[(int)Op.OpAtomicOr] = () => new Nodes.AtomicOr();
            _factories[(int)Op.OpAtomicXor] = () => new Nodes.AtomicXor();
            _factories[(int)Op.OpPhi] = () => new Nodes.Phi();
            _factories[(int)Op.OpLoopMerge] = () => new Nodes.LoopMerge();
            _factories[(int)Op.OpSelectionMerge] = () => new Nodes.SelectionMerge();
            _factories[(int)Op.OpLabel] = () => new Nodes.Label();
            _factories[(int)Op.OpBranch] = () => new Nodes.Branch();
            _factories[(int)Op.OpBranchConditional] = () => new Nodes.BranchConditional();
            _factories[(int)Op.OpSwitch] = () => new Nodes.Switch();
            _factories[(int)Op.OpKill] = () => new Nodes.Kill();
            _factories[(int)Op.OpReturn] = () => new Nodes.Return();
            _factories[(int)Op.OpReturnValue] = () => new Nodes.ReturnValue();
            _factories[(int)Op.OpUnreachable] = () => new Nodes.Unreachable();
            _factories[(int)Op.OpLifetimeStart] = () => new Nodes.LifetimeStart();
            _factories[(int)Op.OpLifetimeStop] = () => new Nodes.LifetimeStop();
            _factories[(int)Op.OpGroupAsyncCopy] = () => new Nodes.GroupAsyncCopy();
            _factories[(int)Op.OpGroupWaitEvents] = () => new Nodes.GroupWaitEvents();
            _factories[(int)Op.OpGroupAll] = () => new Nodes.GroupAll();
            _factories[(int)Op.OpGroupAny] = () => new Nodes.GroupAny();
            _factories[(int)Op.OpGroupBroadcast] = () => new Nodes.GroupBroadcast();
            _factories[(int)Op.OpGroupIAdd] = () => new Nodes.GroupIAdd();
            _factories[(int)Op.OpGroupFAdd] = () => new Nodes.GroupFAdd();
            _factories[(int)Op.OpGroupFMin] = () => new Nodes.GroupFMin();
            _factories[(int)Op.OpGroupUMin] = () => new Nodes.GroupUMin();
            _factories[(int)Op.OpGroupSMin] = () => new Nodes.GroupSMin();
            _factories[(int)Op.OpGroupFMax] = () => new Nodes.GroupFMax();
            _factories[(int)Op.OpGroupUMax] = () => new Nodes.GroupUMax();
            _factories[(int)Op.OpGroupSMax] = () => new Nodes.GroupSMax();
            _factories[(int)Op.OpReadPipe] = () => new Nodes.ReadPipe();
            _factories[(int)Op.OpWritePipe] = () => new Nodes.WritePipe();
            _factories[(int)Op.OpReservedReadPipe] = () => new Nodes.ReservedReadPipe();
            _factories[(int)Op.OpReservedWritePipe] = () => new Nodes.ReservedWritePipe();
            _factories[(int)Op.OpReserveReadPipePackets] = () => new Nodes.ReserveReadPipePackets();
            _factories[(int)Op.OpReserveWritePipePackets] = () => new Nodes.ReserveWritePipePackets();
            _factories[(int)Op.OpCommitReadPipe] = () => new Nodes.CommitReadPipe();
            _factories[(int)Op.OpCommitWritePipe] = () => new Nodes.CommitWritePipe();
            _factories[(int)Op.OpIsValidReserveId] = () => new Nodes.IsValidReserveId();
            _factories[(int)Op.OpGetNumPipePackets] = () => new Nodes.GetNumPipePackets();
            _factories[(int)Op.OpGetMaxPipePackets] = () => new Nodes.GetMaxPipePackets();
            _factories[(int)Op.OpGroupReserveReadPipePackets] = () => new Nodes.GroupReserveReadPipePackets();
            _factories[(int)Op.OpGroupReserveWritePipePackets] = () => new Nodes.GroupReserveWritePipePackets();
            _factories[(int)Op.OpGroupCommitReadPipe] = () => new Nodes.GroupCommitReadPipe();
            _factories[(int)Op.OpGroupCommitWritePipe] = () => new Nodes.GroupCommitWritePipe();
            _factories[(int)Op.OpEnqueueMarker] = () => new Nodes.EnqueueMarker();
            _factories[(int)Op.OpEnqueueKernel] = () => new Nodes.EnqueueKernel();
            _factories[(int)Op.OpGetKernelNDrangeSubGroupCount] = () => new Nodes.GetKernelNDrangeSubGroupCount();
            _factories[(int)Op.OpGetKernelNDrangeMaxSubGroupSize] = () => new Nodes.GetKernelNDrangeMaxSubGroupSize();
            _factories[(int)Op.OpGetKernelWorkGroupSize] = () => new Nodes.GetKernelWorkGroupSize();
            _factories[(int)Op.OpGetKernelPreferredWorkGroupSizeMultiple] = () => new Nodes.GetKernelPreferredWorkGroupSizeMultiple();
            _factories[(int)Op.OpRetainEvent] = () => new Nodes.RetainEvent();
            _factories[(int)Op.OpReleaseEvent] = () => new Nodes.ReleaseEvent();
            _factories[(int)Op.OpCreateUserEvent] = () => new Nodes.CreateUserEvent();
            _factories[(int)Op.OpIsValidEvent] = () => new Nodes.IsValidEvent();
            _factories[(int)Op.OpSetUserEventStatus] = () => new Nodes.SetUserEventStatus();
            _factories[(int)Op.OpCaptureEventProfilingInfo] = () => new Nodes.CaptureEventProfilingInfo();
            _factories[(int)Op.OpGetDefaultQueue] = () => new Nodes.GetDefaultQueue();
            _factories[(int)Op.OpBuildNDRange] = () => new Nodes.BuildNDRange();
            _factories[(int)Op.OpImageSparseSampleImplicitLod] = () => new Nodes.ImageSparseSampleImplicitLod();
            _factories[(int)Op.OpImageSparseSampleExplicitLod] = () => new Nodes.ImageSparseSampleExplicitLod();
            _factories[(int)Op.OpImageSparseSampleDrefImplicitLod] = () => new Nodes.ImageSparseSampleDrefImplicitLod();
            _factories[(int)Op.OpImageSparseSampleDrefExplicitLod] = () => new Nodes.ImageSparseSampleDrefExplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjImplicitLod] = () => new Nodes.ImageSparseSampleProjImplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjExplicitLod] = () => new Nodes.ImageSparseSampleProjExplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjDrefImplicitLod] = () => new Nodes.ImageSparseSampleProjDrefImplicitLod();
            _factories[(int)Op.OpImageSparseSampleProjDrefExplicitLod] = () => new Nodes.ImageSparseSampleProjDrefExplicitLod();
            _factories[(int)Op.OpImageSparseFetch] = () => new Nodes.ImageSparseFetch();
            _factories[(int)Op.OpImageSparseGather] = () => new Nodes.ImageSparseGather();
            _factories[(int)Op.OpImageSparseDrefGather] = () => new Nodes.ImageSparseDrefGather();
            _factories[(int)Op.OpImageSparseTexelsResident] = () => new Nodes.ImageSparseTexelsResident();
            _factories[(int)Op.OpNoLine] = () => new Nodes.NoLine();
            _factories[(int)Op.OpAtomicFlagTestAndSet] = () => new Nodes.AtomicFlagTestAndSet();
            _factories[(int)Op.OpAtomicFlagClear] = () => new Nodes.AtomicFlagClear();
            _factories[(int)Op.OpImageSparseRead] = () => new Nodes.ImageSparseRead();
            _factories[(int)Op.OpSizeOf] = () => new Nodes.SizeOf();
            _factories[(int)Op.OpTypePipeStorage] = () => new Types.TypePipeStorage();
            _factories[(int)Op.OpConstantPipeStorage] = () => new Nodes.ConstantPipeStorage();
            _factories[(int)Op.OpCreatePipeFromPipeStorage] = () => new Nodes.CreatePipeFromPipeStorage();
            _factories[(int)Op.OpGetKernelLocalSizeForSubgroupCount] = () => new Nodes.GetKernelLocalSizeForSubgroupCount();
            _factories[(int)Op.OpGetKernelMaxNumSubgroups] = () => new Nodes.GetKernelMaxNumSubgroups();
            _factories[(int)Op.OpTypeNamedBarrier] = () => new Types.TypeNamedBarrier();
            _factories[(int)Op.OpNamedBarrierInitialize] = () => new Nodes.NamedBarrierInitialize();
            _factories[(int)Op.OpMemoryNamedBarrier] = () => new Nodes.MemoryNamedBarrier();
            _factories[(int)Op.OpModuleProcessed] = () => new Nodes.ModuleProcessed();
            _factories[(int)Op.OpExecutionModeId] = () => new Nodes.ExecutionModeId();
            _factories[(int)Op.OpDecorateId] = () => new Nodes.DecorateId();
            _factories[(int)Op.OpGroupNonUniformElect] = () => new Nodes.GroupNonUniformElect();
            _factories[(int)Op.OpGroupNonUniformAll] = () => new Nodes.GroupNonUniformAll();
            _factories[(int)Op.OpGroupNonUniformAny] = () => new Nodes.GroupNonUniformAny();
            _factories[(int)Op.OpGroupNonUniformAllEqual] = () => new Nodes.GroupNonUniformAllEqual();
            _factories[(int)Op.OpGroupNonUniformBroadcast] = () => new Nodes.GroupNonUniformBroadcast();
            _factories[(int)Op.OpGroupNonUniformBroadcastFirst] = () => new Nodes.GroupNonUniformBroadcastFirst();
            _factories[(int)Op.OpGroupNonUniformBallot] = () => new Nodes.GroupNonUniformBallot();
            _factories[(int)Op.OpGroupNonUniformInverseBallot] = () => new Nodes.GroupNonUniformInverseBallot();
            _factories[(int)Op.OpGroupNonUniformBallotBitExtract] = () => new Nodes.GroupNonUniformBallotBitExtract();
            _factories[(int)Op.OpGroupNonUniformBallotBitCount] = () => new Nodes.GroupNonUniformBallotBitCount();
            _factories[(int)Op.OpGroupNonUniformBallotFindLSB] = () => new Nodes.GroupNonUniformBallotFindLSB();
            _factories[(int)Op.OpGroupNonUniformBallotFindMSB] = () => new Nodes.GroupNonUniformBallotFindMSB();
            _factories[(int)Op.OpGroupNonUniformShuffle] = () => new Nodes.GroupNonUniformShuffle();
            _factories[(int)Op.OpGroupNonUniformShuffleXor] = () => new Nodes.GroupNonUniformShuffleXor();
            _factories[(int)Op.OpGroupNonUniformShuffleUp] = () => new Nodes.GroupNonUniformShuffleUp();
            _factories[(int)Op.OpGroupNonUniformShuffleDown] = () => new Nodes.GroupNonUniformShuffleDown();
            _factories[(int)Op.OpGroupNonUniformIAdd] = () => new Nodes.GroupNonUniformIAdd();
            _factories[(int)Op.OpGroupNonUniformFAdd] = () => new Nodes.GroupNonUniformFAdd();
            _factories[(int)Op.OpGroupNonUniformIMul] = () => new Nodes.GroupNonUniformIMul();
            _factories[(int)Op.OpGroupNonUniformFMul] = () => new Nodes.GroupNonUniformFMul();
            _factories[(int)Op.OpGroupNonUniformSMin] = () => new Nodes.GroupNonUniformSMin();
            _factories[(int)Op.OpGroupNonUniformUMin] = () => new Nodes.GroupNonUniformUMin();
            _factories[(int)Op.OpGroupNonUniformFMin] = () => new Nodes.GroupNonUniformFMin();
            _factories[(int)Op.OpGroupNonUniformSMax] = () => new Nodes.GroupNonUniformSMax();
            _factories[(int)Op.OpGroupNonUniformUMax] = () => new Nodes.GroupNonUniformUMax();
            _factories[(int)Op.OpGroupNonUniformFMax] = () => new Nodes.GroupNonUniformFMax();
            _factories[(int)Op.OpGroupNonUniformBitwiseAnd] = () => new Nodes.GroupNonUniformBitwiseAnd();
            _factories[(int)Op.OpGroupNonUniformBitwiseOr] = () => new Nodes.GroupNonUniformBitwiseOr();
            _factories[(int)Op.OpGroupNonUniformBitwiseXor] = () => new Nodes.GroupNonUniformBitwiseXor();
            _factories[(int)Op.OpGroupNonUniformLogicalAnd] = () => new Nodes.GroupNonUniformLogicalAnd();
            _factories[(int)Op.OpGroupNonUniformLogicalOr] = () => new Nodes.GroupNonUniformLogicalOr();
            _factories[(int)Op.OpGroupNonUniformLogicalXor] = () => new Nodes.GroupNonUniformLogicalXor();
            _factories[(int)Op.OpGroupNonUniformQuadBroadcast] = () => new Nodes.GroupNonUniformQuadBroadcast();
            _factories[(int)Op.OpGroupNonUniformQuadSwap] = () => new Nodes.GroupNonUniformQuadSwap();
            _factories[(int)Op.OpCopyLogical] = () => new Nodes.CopyLogical();
            _factories[(int)Op.OpPtrEqual] = () => new Nodes.PtrEqual();
            _factories[(int)Op.OpPtrNotEqual] = () => new Nodes.PtrNotEqual();
            _factories[(int)Op.OpPtrDiff] = () => new Nodes.PtrDiff();
            _factories[(int)Op.OpSubgroupBallotKHR] = () => new Nodes.SubgroupBallotKHR();
            _factories[(int)Op.OpSubgroupFirstInvocationKHR] = () => new Nodes.SubgroupFirstInvocationKHR();
            _factories[(int)Op.OpSubgroupAllKHR] = () => new Nodes.SubgroupAllKHR();
            _factories[(int)Op.OpSubgroupAnyKHR] = () => new Nodes.SubgroupAnyKHR();
            _factories[(int)Op.OpSubgroupAllEqualKHR] = () => new Nodes.SubgroupAllEqualKHR();
            _factories[(int)Op.OpSubgroupReadInvocationKHR] = () => new Nodes.SubgroupReadInvocationKHR();
            _factories[(int)Op.OpGroupIAddNonUniformAMD] = () => new Nodes.GroupIAddNonUniformAMD();
            _factories[(int)Op.OpGroupFAddNonUniformAMD] = () => new Nodes.GroupFAddNonUniformAMD();
            _factories[(int)Op.OpGroupFMinNonUniformAMD] = () => new Nodes.GroupFMinNonUniformAMD();
            _factories[(int)Op.OpGroupUMinNonUniformAMD] = () => new Nodes.GroupUMinNonUniformAMD();
            _factories[(int)Op.OpGroupSMinNonUniformAMD] = () => new Nodes.GroupSMinNonUniformAMD();
            _factories[(int)Op.OpGroupFMaxNonUniformAMD] = () => new Nodes.GroupFMaxNonUniformAMD();
            _factories[(int)Op.OpGroupUMaxNonUniformAMD] = () => new Nodes.GroupUMaxNonUniformAMD();
            _factories[(int)Op.OpGroupSMaxNonUniformAMD] = () => new Nodes.GroupSMaxNonUniformAMD();
            _factories[(int)Op.OpFragmentMaskFetchAMD] = () => new Nodes.FragmentMaskFetchAMD();
            _factories[(int)Op.OpFragmentFetchAMD] = () => new Nodes.FragmentFetchAMD();
            _factories[(int)Op.OpReadClockKHR] = () => new Nodes.ReadClockKHR();
            _factories[(int)Op.OpImageSampleFootprintNV] = () => new Nodes.ImageSampleFootprintNV();
            _factories[(int)Op.OpGroupNonUniformPartitionNV] = () => new Nodes.GroupNonUniformPartitionNV();
            _factories[(int)Op.OpWritePackedPrimitiveIndices4x8NV] = () => new Nodes.WritePackedPrimitiveIndices4x8NV();
            _factories[(int)Op.OpReportIntersectionNV] = () => new Nodes.ReportIntersectionNV();
            _factories[(int)Op.OpIgnoreIntersectionNV] = () => new Nodes.IgnoreIntersectionNV();
            _factories[(int)Op.OpTerminateRayNV] = () => new Nodes.TerminateRayNV();
            _factories[(int)Op.OpTraceNV] = () => new Nodes.TraceNV();
            _factories[(int)Op.OpTypeAccelerationStructureNV] = () => new Types.TypeAccelerationStructureNV();
            _factories[(int)Op.OpTypeRayQueryProvisionalKHR] = () => new Types.TypeRayQueryProvisionalKHR();
            _factories[(int)Op.OpRayQueryInitializeKHR] = () => new Nodes.RayQueryInitializeKHR();
            _factories[(int)Op.OpRayQueryTerminateKHR] = () => new Nodes.RayQueryTerminateKHR();
            _factories[(int)Op.OpRayQueryGenerateIntersectionKHR] = () => new Nodes.RayQueryGenerateIntersectionKHR();
            _factories[(int)Op.OpRayQueryConfirmIntersectionKHR] = () => new Nodes.RayQueryConfirmIntersectionKHR();
            _factories[(int)Op.OpRayQueryProceedKHR] = () => new Nodes.RayQueryProceedKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionTypeKHR] = () => new Nodes.RayQueryGetIntersectionTypeKHR();
            _factories[(int)Op.OpRayQueryGetRayTMinKHR] = () => new Nodes.RayQueryGetRayTMinKHR();
            _factories[(int)Op.OpRayQueryGetRayFlagsKHR] = () => new Nodes.RayQueryGetRayFlagsKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionTKHR] = () => new Nodes.RayQueryGetIntersectionTKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR] = () => new Nodes.RayQueryGetIntersectionInstanceCustomIndexKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionInstanceIdKHR] = () => new Nodes.RayQueryGetIntersectionInstanceIdKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR] = () => new Nodes.RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionGeometryIndexKHR] = () => new Nodes.RayQueryGetIntersectionGeometryIndexKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionPrimitiveIndexKHR] = () => new Nodes.RayQueryGetIntersectionPrimitiveIndexKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionBarycentricsKHR] = () => new Nodes.RayQueryGetIntersectionBarycentricsKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionFrontFaceKHR] = () => new Nodes.RayQueryGetIntersectionFrontFaceKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR] = () => new Nodes.RayQueryGetIntersectionCandidateAABBOpaqueKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionObjectRayDirectionKHR] = () => new Nodes.RayQueryGetIntersectionObjectRayDirectionKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionObjectRayOriginKHR] = () => new Nodes.RayQueryGetIntersectionObjectRayOriginKHR();
            _factories[(int)Op.OpRayQueryGetWorldRayDirectionKHR] = () => new Nodes.RayQueryGetWorldRayDirectionKHR();
            _factories[(int)Op.OpRayQueryGetWorldRayOriginKHR] = () => new Nodes.RayQueryGetWorldRayOriginKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionObjectToWorldKHR] = () => new Nodes.RayQueryGetIntersectionObjectToWorldKHR();
            _factories[(int)Op.OpRayQueryGetIntersectionWorldToObjectKHR] = () => new Nodes.RayQueryGetIntersectionWorldToObjectKHR();
            _factories[(int)Op.OpExecuteCallableNV] = () => new Nodes.ExecuteCallableNV();
            _factories[(int)Op.OpTypeCooperativeMatrixNV] = () => new Types.TypeCooperativeMatrixNV();
            _factories[(int)Op.OpCooperativeMatrixLoadNV] = () => new Nodes.CooperativeMatrixLoadNV();
            _factories[(int)Op.OpCooperativeMatrixStoreNV] = () => new Nodes.CooperativeMatrixStoreNV();
            _factories[(int)Op.OpCooperativeMatrixMulAddNV] = () => new Nodes.CooperativeMatrixMulAddNV();
            _factories[(int)Op.OpCooperativeMatrixLengthNV] = () => new Nodes.CooperativeMatrixLengthNV();
            _factories[(int)Op.OpBeginInvocationInterlockEXT] = () => new Nodes.BeginInvocationInterlockEXT();
            _factories[(int)Op.OpEndInvocationInterlockEXT] = () => new Nodes.EndInvocationInterlockEXT();
            _factories[(int)Op.OpDemoteToHelperInvocationEXT] = () => new Nodes.DemoteToHelperInvocationEXT();
            _factories[(int)Op.OpIsHelperInvocationEXT] = () => new Nodes.IsHelperInvocationEXT();
            _factories[(int)Op.OpSubgroupShuffleINTEL] = () => new Nodes.SubgroupShuffleINTEL();
            _factories[(int)Op.OpSubgroupShuffleDownINTEL] = () => new Nodes.SubgroupShuffleDownINTEL();
            _factories[(int)Op.OpSubgroupShuffleUpINTEL] = () => new Nodes.SubgroupShuffleUpINTEL();
            _factories[(int)Op.OpSubgroupShuffleXorINTEL] = () => new Nodes.SubgroupShuffleXorINTEL();
            _factories[(int)Op.OpSubgroupBlockReadINTEL] = () => new Nodes.SubgroupBlockReadINTEL();
            _factories[(int)Op.OpSubgroupBlockWriteINTEL] = () => new Nodes.SubgroupBlockWriteINTEL();
            _factories[(int)Op.OpSubgroupImageBlockReadINTEL] = () => new Nodes.SubgroupImageBlockReadINTEL();
            _factories[(int)Op.OpSubgroupImageBlockWriteINTEL] = () => new Nodes.SubgroupImageBlockWriteINTEL();
            _factories[(int)Op.OpSubgroupImageMediaBlockReadINTEL] = () => new Nodes.SubgroupImageMediaBlockReadINTEL();
            _factories[(int)Op.OpSubgroupImageMediaBlockWriteINTEL] = () => new Nodes.SubgroupImageMediaBlockWriteINTEL();
            _factories[(int)Op.OpUCountLeadingZerosINTEL] = () => new Nodes.UCountLeadingZerosINTEL();
            _factories[(int)Op.OpUCountTrailingZerosINTEL] = () => new Nodes.UCountTrailingZerosINTEL();
            _factories[(int)Op.OpAbsISubINTEL] = () => new Nodes.AbsISubINTEL();
            _factories[(int)Op.OpAbsUSubINTEL] = () => new Nodes.AbsUSubINTEL();
            _factories[(int)Op.OpIAddSatINTEL] = () => new Nodes.IAddSatINTEL();
            _factories[(int)Op.OpUAddSatINTEL] = () => new Nodes.UAddSatINTEL();
            _factories[(int)Op.OpIAverageINTEL] = () => new Nodes.IAverageINTEL();
            _factories[(int)Op.OpUAverageINTEL] = () => new Nodes.UAverageINTEL();
            _factories[(int)Op.OpIAverageRoundedINTEL] = () => new Nodes.IAverageRoundedINTEL();
            _factories[(int)Op.OpUAverageRoundedINTEL] = () => new Nodes.UAverageRoundedINTEL();
            _factories[(int)Op.OpISubSatINTEL] = () => new Nodes.ISubSatINTEL();
            _factories[(int)Op.OpUSubSatINTEL] = () => new Nodes.USubSatINTEL();
            _factories[(int)Op.OpIMul32x16INTEL] = () => new Nodes.IMul32x16INTEL();
            _factories[(int)Op.OpUMul32x16INTEL] = () => new Nodes.UMul32x16INTEL();
            _factories[(int)Op.OpDecorateString] = () => new Nodes.DecorateString();
            _factories[(int)Op.OpMemberDecorateString] = () => new Nodes.MemberDecorateString();
            _factories[(int)Op.OpVmeImageINTEL] = () => new Nodes.VmeImageINTEL();
            _factories[(int)Op.OpTypeVmeImageINTEL] = () => new Types.TypeVmeImageINTEL();
            _factories[(int)Op.OpTypeAvcImePayloadINTEL] = () => new Types.TypeAvcImePayloadINTEL();
            _factories[(int)Op.OpTypeAvcRefPayloadINTEL] = () => new Types.TypeAvcRefPayloadINTEL();
            _factories[(int)Op.OpTypeAvcSicPayloadINTEL] = () => new Types.TypeAvcSicPayloadINTEL();
            _factories[(int)Op.OpTypeAvcMcePayloadINTEL] = () => new Types.TypeAvcMcePayloadINTEL();
            _factories[(int)Op.OpTypeAvcMceResultINTEL] = () => new Types.TypeAvcMceResultINTEL();
            _factories[(int)Op.OpTypeAvcImeResultINTEL] = () => new Types.TypeAvcImeResultINTEL();
            _factories[(int)Op.OpTypeAvcImeResultSingleReferenceStreamoutINTEL] = () => new Types.TypeAvcImeResultSingleReferenceStreamoutINTEL();
            _factories[(int)Op.OpTypeAvcImeResultDualReferenceStreamoutINTEL] = () => new Types.TypeAvcImeResultDualReferenceStreamoutINTEL();
            _factories[(int)Op.OpTypeAvcImeSingleReferenceStreaminINTEL] = () => new Types.TypeAvcImeSingleReferenceStreaminINTEL();
            _factories[(int)Op.OpTypeAvcImeDualReferenceStreaminINTEL] = () => new Types.TypeAvcImeDualReferenceStreaminINTEL();
            _factories[(int)Op.OpTypeAvcRefResultINTEL] = () => new Types.TypeAvcRefResultINTEL();
            _factories[(int)Op.OpTypeAvcSicResultINTEL] = () => new Types.TypeAvcSicResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL] = () => new Nodes.SubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultInterShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetInterShapePenaltyINTEL] = () => new Nodes.SubgroupAvcMceSetInterShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetInterDirectionPenaltyINTEL] = () => new Nodes.SubgroupAvcMceSetInterDirectionPenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL] = () => new Nodes.SubgroupAvcMceSetMotionVectorCostFunctionINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL] = () => new Nodes.SubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetAcOnlyHaarINTEL] = () => new Nodes.SubgroupAvcMceSetAcOnlyHaarINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL] = () => new Nodes.SubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL] = () => new Nodes.SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL();
            _factories[(int)Op.OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL] = () => new Nodes.SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToImePayloadINTEL] = () => new Nodes.SubgroupAvcMceConvertToImePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToImeResultINTEL] = () => new Nodes.SubgroupAvcMceConvertToImeResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToRefPayloadINTEL] = () => new Nodes.SubgroupAvcMceConvertToRefPayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToRefResultINTEL] = () => new Nodes.SubgroupAvcMceConvertToRefResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToSicPayloadINTEL] = () => new Nodes.SubgroupAvcMceConvertToSicPayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcMceConvertToSicResultINTEL] = () => new Nodes.SubgroupAvcMceConvertToSicResultINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetMotionVectorsINTEL] = () => new Nodes.SubgroupAvcMceGetMotionVectorsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterDistortionsINTEL] = () => new Nodes.SubgroupAvcMceGetInterDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetBestInterDistortionsINTEL] = () => new Nodes.SubgroupAvcMceGetBestInterDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterMajorShapeINTEL] = () => new Nodes.SubgroupAvcMceGetInterMajorShapeINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterMinorShapeINTEL] = () => new Nodes.SubgroupAvcMceGetInterMinorShapeINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterDirectionsINTEL] = () => new Nodes.SubgroupAvcMceGetInterDirectionsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterMotionVectorCountINTEL] = () => new Nodes.SubgroupAvcMceGetInterMotionVectorCountINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterReferenceIdsINTEL] = () => new Nodes.SubgroupAvcMceGetInterReferenceIdsINTEL();
            _factories[(int)Op.OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL] = () => new Nodes.SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL();
            _factories[(int)Op.OpSubgroupAvcImeInitializeINTEL] = () => new Nodes.SubgroupAvcImeInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetSingleReferenceINTEL] = () => new Nodes.SubgroupAvcImeSetSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetDualReferenceINTEL] = () => new Nodes.SubgroupAvcImeSetDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeRefWindowSizeINTEL] = () => new Nodes.SubgroupAvcImeRefWindowSizeINTEL();
            _factories[(int)Op.OpSubgroupAvcImeAdjustRefOffsetINTEL] = () => new Nodes.SubgroupAvcImeAdjustRefOffsetINTEL();
            _factories[(int)Op.OpSubgroupAvcImeConvertToMcePayloadINTEL] = () => new Nodes.SubgroupAvcImeConvertToMcePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetMaxMotionVectorCountINTEL] = () => new Nodes.SubgroupAvcImeSetMaxMotionVectorCountINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL] = () => new Nodes.SubgroupAvcImeSetUnidirectionalMixDisableINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL] = () => new Nodes.SubgroupAvcImeSetEarlySearchTerminationThresholdINTEL();
            _factories[(int)Op.OpSubgroupAvcImeSetWeightedSadINTEL] = () => new Nodes.SubgroupAvcImeSetWeightedSadINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL] = () => new Nodes.SubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeConvertToMceResultINTEL] = () => new Nodes.SubgroupAvcImeConvertToMceResultINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetSingleReferenceStreaminINTEL] = () => new Nodes.SubgroupAvcImeGetSingleReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetDualReferenceStreaminINTEL] = () => new Nodes.SubgroupAvcImeGetDualReferenceStreaminINTEL();
            _factories[(int)Op.OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL] = () => new Nodes.SubgroupAvcImeStripSingleReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeStripDualReferenceStreamoutINTEL] = () => new Nodes.SubgroupAvcImeStripDualReferenceStreamoutINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL] = () => new Nodes.SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL] = () => new Nodes.SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL] = () => new Nodes.SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL] = () => new Nodes.SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL] = () => new Nodes.SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL] = () => new Nodes.SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetBorderReachedINTEL] = () => new Nodes.SubgroupAvcImeGetBorderReachedINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL] = () => new Nodes.SubgroupAvcImeGetTruncatedSearchIndicationINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL] = () => new Nodes.SubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL] = () => new Nodes.SubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL();
            _factories[(int)Op.OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL] = () => new Nodes.SubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL();
            _factories[(int)Op.OpSubgroupAvcFmeInitializeINTEL] = () => new Nodes.SubgroupAvcFmeInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcBmeInitializeINTEL] = () => new Nodes.SubgroupAvcBmeInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcRefConvertToMcePayloadINTEL] = () => new Nodes.SubgroupAvcRefConvertToMcePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcRefSetBidirectionalMixDisableINTEL] = () => new Nodes.SubgroupAvcRefSetBidirectionalMixDisableINTEL();
            _factories[(int)Op.OpSubgroupAvcRefSetBilinearFilterEnableINTEL] = () => new Nodes.SubgroupAvcRefSetBilinearFilterEnableINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL] = () => new Nodes.SubgroupAvcRefEvaluateWithSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithDualReferenceINTEL] = () => new Nodes.SubgroupAvcRefEvaluateWithDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL] = () => new Nodes.SubgroupAvcRefEvaluateWithMultiReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL] = () => new Nodes.SubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL();
            _factories[(int)Op.OpSubgroupAvcRefConvertToMceResultINTEL] = () => new Nodes.SubgroupAvcRefConvertToMceResultINTEL();
            _factories[(int)Op.OpSubgroupAvcSicInitializeINTEL] = () => new Nodes.SubgroupAvcSicInitializeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConfigureSkcINTEL] = () => new Nodes.SubgroupAvcSicConfigureSkcINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConfigureIpeLumaINTEL] = () => new Nodes.SubgroupAvcSicConfigureIpeLumaINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConfigureIpeLumaChromaINTEL] = () => new Nodes.SubgroupAvcSicConfigureIpeLumaChromaINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetMotionVectorMaskINTEL] = () => new Nodes.SubgroupAvcSicGetMotionVectorMaskINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConvertToMcePayloadINTEL] = () => new Nodes.SubgroupAvcSicConvertToMcePayloadINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL] = () => new Nodes.SubgroupAvcSicSetIntraLumaShapePenaltyINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL] = () => new Nodes.SubgroupAvcSicSetIntraLumaModeCostFunctionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL] = () => new Nodes.SubgroupAvcSicSetIntraChromaModeCostFunctionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetBilinearFilterEnableINTEL] = () => new Nodes.SubgroupAvcSicSetBilinearFilterEnableINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL] = () => new Nodes.SubgroupAvcSicSetSkcForwardTransformEnableINTEL();
            _factories[(int)Op.OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL] = () => new Nodes.SubgroupAvcSicSetBlockBasedRawSkipSadINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateIpeINTEL] = () => new Nodes.SubgroupAvcSicEvaluateIpeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL] = () => new Nodes.SubgroupAvcSicEvaluateWithSingleReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithDualReferenceINTEL] = () => new Nodes.SubgroupAvcSicEvaluateWithDualReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL] = () => new Nodes.SubgroupAvcSicEvaluateWithMultiReferenceINTEL();
            _factories[(int)Op.OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL] = () => new Nodes.SubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL();
            _factories[(int)Op.OpSubgroupAvcSicConvertToMceResultINTEL] = () => new Nodes.SubgroupAvcSicConvertToMceResultINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetIpeLumaShapeINTEL] = () => new Nodes.SubgroupAvcSicGetIpeLumaShapeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL] = () => new Nodes.SubgroupAvcSicGetBestIpeLumaDistortionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL] = () => new Nodes.SubgroupAvcSicGetBestIpeChromaDistortionINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetPackedIpeLumaModesINTEL] = () => new Nodes.SubgroupAvcSicGetPackedIpeLumaModesINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetIpeChromaModeINTEL] = () => new Nodes.SubgroupAvcSicGetIpeChromaModeINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL] = () => new Nodes.SubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL] = () => new Nodes.SubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL();
            _factories[(int)Op.OpSubgroupAvcSicGetInterRawSadsINTEL] = () => new Nodes.SubgroupAvcSicGetInterRawSadsINTEL();
         }

        public static Node Create(Op opCode)
        {
            var code = (uint) opCode;
            if (code >= _factories.Length || _factories[code] == null)
            {
                throw new NotImplementedException("Node factory is not defined for "+opCode);
            }
            return _factories[code]();
        }
    }
}