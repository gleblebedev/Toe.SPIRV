using System;
using System.Collections.Generic;
using System.Text;
using Toe.SPIRV.Instructions;
using Toe.SPIRV.Spv;

namespace Toe.SPIRV.Reflection.Nodes
{
    public abstract class Node
    {
        public static Node Create(Instruction instruction, SpirvInstructionTreeBuilder context)
        {
            switch (instruction.OpCode)
            {
                case Op.OpConstantTrue: return new ConstantTrue((OpConstantTrue)instruction, context);
                case Op.OpConstantFalse: return new ConstantFalse((OpConstantFalse)instruction, context);
                case Op.OpConstant: return new Constant((OpConstant)instruction, context);
                case Op.OpConstantComposite: return new ConstantComposite((OpConstantComposite)instruction, context);
                case Op.OpConstantSampler: return new ConstantSampler((OpConstantSampler)instruction, context);
                case Op.OpConstantNull: return new ConstantNull((OpConstantNull)instruction, context);
                case Op.OpSpecConstantTrue: return new SpecConstantTrue((OpSpecConstantTrue)instruction, context);
                case Op.OpSpecConstantFalse: return new SpecConstantFalse((OpSpecConstantFalse)instruction, context);
                case Op.OpSpecConstant: return new SpecConstant((OpSpecConstant)instruction, context);
                case Op.OpSpecConstantComposite: return new SpecConstantComposite((OpSpecConstantComposite)instruction, context);
                case Op.OpSpecConstantOp: return new SpecConstantOp((OpSpecConstantOp)instruction, context);
                case Op.OpFunctionParameter: return new FunctionParameter((OpFunctionParameter)instruction, context);
                case Op.OpFunctionCall: return new FunctionCall((OpFunctionCall)instruction, context);
                case Op.OpVariable: return new Variable((OpVariable)instruction, context);
                case Op.OpImageTexelPointer: return new ImageTexelPointer((OpImageTexelPointer)instruction, context);
                case Op.OpLoad: return new Load((OpLoad)instruction, context);
                case Op.OpStore: return new Store((OpStore)instruction, context);
                case Op.OpCopyMemory: return new CopyMemory((OpCopyMemory)instruction, context);
                case Op.OpCopyMemorySized: return new CopyMemorySized((OpCopyMemorySized)instruction, context);
                case Op.OpAccessChain: return new AccessChain((OpAccessChain)instruction, context);
                case Op.OpInBoundsAccessChain: return new InBoundsAccessChain((OpInBoundsAccessChain)instruction, context);
                case Op.OpPtrAccessChain: return new PtrAccessChain((OpPtrAccessChain)instruction, context);
                case Op.OpArrayLength: return new ArrayLength((OpArrayLength)instruction, context);
                case Op.OpGenericPtrMemSemantics: return new GenericPtrMemSemantics((OpGenericPtrMemSemantics)instruction, context);
                case Op.OpInBoundsPtrAccessChain: return new InBoundsPtrAccessChain((OpInBoundsPtrAccessChain)instruction, context);
                case Op.OpDecorate: return new Decorate((OpDecorate)instruction, context);
                case Op.OpMemberDecorate: return new MemberDecorate((OpMemberDecorate)instruction, context);
                case Op.OpDecorationGroup: return new DecorationGroup((OpDecorationGroup)instruction, context);
                case Op.OpGroupDecorate: return new GroupDecorate((OpGroupDecorate)instruction, context);
                case Op.OpGroupMemberDecorate: return new GroupMemberDecorate((OpGroupMemberDecorate)instruction, context);
                case Op.OpVectorExtractDynamic: return new VectorExtractDynamic((OpVectorExtractDynamic)instruction, context);
                case Op.OpVectorInsertDynamic: return new VectorInsertDynamic((OpVectorInsertDynamic)instruction, context);
                case Op.OpVectorShuffle: return new VectorShuffle((OpVectorShuffle)instruction, context);
                case Op.OpCompositeConstruct: return new CompositeConstruct((OpCompositeConstruct)instruction, context);
                case Op.OpCompositeExtract: return new CompositeExtract((OpCompositeExtract)instruction, context);
                case Op.OpCompositeInsert: return new CompositeInsert((OpCompositeInsert)instruction, context);
                case Op.OpCopyObject: return new CopyObject((OpCopyObject)instruction, context);
                case Op.OpTranspose: return new Transpose((OpTranspose)instruction, context);
                case Op.OpSampledImage: return new SampledImage((OpSampledImage)instruction, context);
                case Op.OpImageSampleImplicitLod: return new ImageSampleImplicitLod((OpImageSampleImplicitLod)instruction, context);
                case Op.OpImageSampleExplicitLod: return new ImageSampleExplicitLod((OpImageSampleExplicitLod)instruction, context);
                case Op.OpImageSampleDrefImplicitLod: return new ImageSampleDrefImplicitLod((OpImageSampleDrefImplicitLod)instruction, context);
                case Op.OpImageSampleDrefExplicitLod: return new ImageSampleDrefExplicitLod((OpImageSampleDrefExplicitLod)instruction, context);
                case Op.OpImageSampleProjImplicitLod: return new ImageSampleProjImplicitLod((OpImageSampleProjImplicitLod)instruction, context);
                case Op.OpImageSampleProjExplicitLod: return new ImageSampleProjExplicitLod((OpImageSampleProjExplicitLod)instruction, context);
                case Op.OpImageSampleProjDrefImplicitLod: return new ImageSampleProjDrefImplicitLod((OpImageSampleProjDrefImplicitLod)instruction, context);
                case Op.OpImageSampleProjDrefExplicitLod: return new ImageSampleProjDrefExplicitLod((OpImageSampleProjDrefExplicitLod)instruction, context);
                case Op.OpImageFetch: return new ImageFetch((OpImageFetch)instruction, context);
                case Op.OpImageGather: return new ImageGather((OpImageGather)instruction, context);
                case Op.OpImageDrefGather: return new ImageDrefGather((OpImageDrefGather)instruction, context);
                case Op.OpImageRead: return new ImageRead((OpImageRead)instruction, context);
                case Op.OpImageWrite: return new ImageWrite((OpImageWrite)instruction, context);
                case Op.OpImage: return new Image((OpImage)instruction, context);
                case Op.OpImageQueryFormat: return new ImageQueryFormat((OpImageQueryFormat)instruction, context);
                case Op.OpImageQueryOrder: return new ImageQueryOrder((OpImageQueryOrder)instruction, context);
                case Op.OpImageQuerySizeLod: return new ImageQuerySizeLod((OpImageQuerySizeLod)instruction, context);
                case Op.OpImageQuerySize: return new ImageQuerySize((OpImageQuerySize)instruction, context);
                case Op.OpImageQueryLod: return new ImageQueryLod((OpImageQueryLod)instruction, context);
                case Op.OpImageQueryLevels: return new ImageQueryLevels((OpImageQueryLevels)instruction, context);
                case Op.OpImageQuerySamples: return new ImageQuerySamples((OpImageQuerySamples)instruction, context);
                case Op.OpConvertFToU: return new ConvertFToU((OpConvertFToU)instruction, context);
                case Op.OpConvertFToS: return new ConvertFToS((OpConvertFToS)instruction, context);
                case Op.OpConvertSToF: return new ConvertSToF((OpConvertSToF)instruction, context);
                case Op.OpConvertUToF: return new ConvertUToF((OpConvertUToF)instruction, context);
                case Op.OpUConvert: return new UConvert((OpUConvert)instruction, context);
                case Op.OpSConvert: return new SConvert((OpSConvert)instruction, context);
                case Op.OpFConvert: return new FConvert((OpFConvert)instruction, context);
                case Op.OpQuantizeToF16: return new QuantizeToF16((OpQuantizeToF16)instruction, context);
                case Op.OpConvertPtrToU: return new ConvertPtrToU((OpConvertPtrToU)instruction, context);
                case Op.OpSatConvertSToU: return new SatConvertSToU((OpSatConvertSToU)instruction, context);
                case Op.OpSatConvertUToS: return new SatConvertUToS((OpSatConvertUToS)instruction, context);
                case Op.OpConvertUToPtr: return new ConvertUToPtr((OpConvertUToPtr)instruction, context);
                case Op.OpPtrCastToGeneric: return new PtrCastToGeneric((OpPtrCastToGeneric)instruction, context);
                case Op.OpGenericCastToPtr: return new GenericCastToPtr((OpGenericCastToPtr)instruction, context);
                case Op.OpGenericCastToPtrExplicit: return new GenericCastToPtrExplicit((OpGenericCastToPtrExplicit)instruction, context);
                case Op.OpBitcast: return new Bitcast((OpBitcast)instruction, context);
                case Op.OpSNegate: return new SNegate((OpSNegate)instruction, context);
                case Op.OpFNegate: return new FNegate((OpFNegate)instruction, context);
                case Op.OpIAdd: return new IAdd((OpIAdd)instruction, context);
                case Op.OpFAdd: return new FAdd((OpFAdd)instruction, context);
                case Op.OpISub: return new ISub((OpISub)instruction, context);
                case Op.OpFSub: return new FSub((OpFSub)instruction, context);
                case Op.OpIMul: return new IMul((OpIMul)instruction, context);
                case Op.OpFMul: return new FMul((OpFMul)instruction, context);
                case Op.OpUDiv: return new UDiv((OpUDiv)instruction, context);
                case Op.OpSDiv: return new SDiv((OpSDiv)instruction, context);
                case Op.OpFDiv: return new FDiv((OpFDiv)instruction, context);
                case Op.OpUMod: return new UMod((OpUMod)instruction, context);
                case Op.OpSRem: return new SRem((OpSRem)instruction, context);
                case Op.OpSMod: return new SMod((OpSMod)instruction, context);
                case Op.OpFRem: return new FRem((OpFRem)instruction, context);
                case Op.OpFMod: return new FMod((OpFMod)instruction, context);
                case Op.OpVectorTimesScalar: return new VectorTimesScalar((OpVectorTimesScalar)instruction, context);
                case Op.OpMatrixTimesScalar: return new MatrixTimesScalar((OpMatrixTimesScalar)instruction, context);
                case Op.OpVectorTimesMatrix: return new VectorTimesMatrix((OpVectorTimesMatrix)instruction, context);
                case Op.OpMatrixTimesVector: return new MatrixTimesVector((OpMatrixTimesVector)instruction, context);
                case Op.OpMatrixTimesMatrix: return new MatrixTimesMatrix((OpMatrixTimesMatrix)instruction, context);
                case Op.OpOuterProduct: return new OuterProduct((OpOuterProduct)instruction, context);
                case Op.OpDot: return new Dot((OpDot)instruction, context);
                case Op.OpIAddCarry: return new IAddCarry((OpIAddCarry)instruction, context);
                case Op.OpISubBorrow: return new ISubBorrow((OpISubBorrow)instruction, context);
                case Op.OpUMulExtended: return new UMulExtended((OpUMulExtended)instruction, context);
                case Op.OpSMulExtended: return new SMulExtended((OpSMulExtended)instruction, context);
                case Op.OpAny: return new Any((OpAny)instruction, context);
                case Op.OpAll: return new All((OpAll)instruction, context);
                case Op.OpIsNan: return new IsNan((OpIsNan)instruction, context);
                case Op.OpIsInf: return new IsInf((OpIsInf)instruction, context);
                case Op.OpIsFinite: return new IsFinite((OpIsFinite)instruction, context);
                case Op.OpIsNormal: return new IsNormal((OpIsNormal)instruction, context);
                case Op.OpSignBitSet: return new SignBitSet((OpSignBitSet)instruction, context);
                case Op.OpLessOrGreater: return new LessOrGreater((OpLessOrGreater)instruction, context);
                case Op.OpOrdered: return new Ordered((OpOrdered)instruction, context);
                case Op.OpUnordered: return new Unordered((OpUnordered)instruction, context);
                case Op.OpLogicalEqual: return new LogicalEqual((OpLogicalEqual)instruction, context);
                case Op.OpLogicalNotEqual: return new LogicalNotEqual((OpLogicalNotEqual)instruction, context);
                case Op.OpLogicalOr: return new LogicalOr((OpLogicalOr)instruction, context);
                case Op.OpLogicalAnd: return new LogicalAnd((OpLogicalAnd)instruction, context);
                case Op.OpLogicalNot: return new LogicalNot((OpLogicalNot)instruction, context);
                case Op.OpSelect: return new Select((OpSelect)instruction, context);
                case Op.OpIEqual: return new IEqual((OpIEqual)instruction, context);
                case Op.OpINotEqual: return new INotEqual((OpINotEqual)instruction, context);
                case Op.OpUGreaterThan: return new UGreaterThan((OpUGreaterThan)instruction, context);
                case Op.OpSGreaterThan: return new SGreaterThan((OpSGreaterThan)instruction, context);
                case Op.OpUGreaterThanEqual: return new UGreaterThanEqual((OpUGreaterThanEqual)instruction, context);
                case Op.OpSGreaterThanEqual: return new SGreaterThanEqual((OpSGreaterThanEqual)instruction, context);
                case Op.OpULessThan: return new ULessThan((OpULessThan)instruction, context);
                case Op.OpSLessThan: return new SLessThan((OpSLessThan)instruction, context);
                case Op.OpULessThanEqual: return new ULessThanEqual((OpULessThanEqual)instruction, context);
                case Op.OpSLessThanEqual: return new SLessThanEqual((OpSLessThanEqual)instruction, context);
                case Op.OpFOrdEqual: return new FOrdEqual((OpFOrdEqual)instruction, context);
                case Op.OpFUnordEqual: return new FUnordEqual((OpFUnordEqual)instruction, context);
                case Op.OpFOrdNotEqual: return new FOrdNotEqual((OpFOrdNotEqual)instruction, context);
                case Op.OpFUnordNotEqual: return new FUnordNotEqual((OpFUnordNotEqual)instruction, context);
                case Op.OpFOrdLessThan: return new FOrdLessThan((OpFOrdLessThan)instruction, context);
                case Op.OpFUnordLessThan: return new FUnordLessThan((OpFUnordLessThan)instruction, context);
                case Op.OpFOrdGreaterThan: return new FOrdGreaterThan((OpFOrdGreaterThan)instruction, context);
                case Op.OpFUnordGreaterThan: return new FUnordGreaterThan((OpFUnordGreaterThan)instruction, context);
                case Op.OpFOrdLessThanEqual: return new FOrdLessThanEqual((OpFOrdLessThanEqual)instruction, context);
                case Op.OpFUnordLessThanEqual: return new FUnordLessThanEqual((OpFUnordLessThanEqual)instruction, context);
                case Op.OpFOrdGreaterThanEqual: return new FOrdGreaterThanEqual((OpFOrdGreaterThanEqual)instruction, context);
                case Op.OpFUnordGreaterThanEqual: return new FUnordGreaterThanEqual((OpFUnordGreaterThanEqual)instruction, context);
                case Op.OpShiftRightLogical: return new ShiftRightLogical((OpShiftRightLogical)instruction, context);
                case Op.OpShiftRightArithmetic: return new ShiftRightArithmetic((OpShiftRightArithmetic)instruction, context);
                case Op.OpShiftLeftLogical: return new ShiftLeftLogical((OpShiftLeftLogical)instruction, context);
                case Op.OpBitwiseOr: return new BitwiseOr((OpBitwiseOr)instruction, context);
                case Op.OpBitwiseXor: return new BitwiseXor((OpBitwiseXor)instruction, context);
                case Op.OpBitwiseAnd: return new BitwiseAnd((OpBitwiseAnd)instruction, context);
                case Op.OpNot: return new Not((OpNot)instruction, context);
                case Op.OpBitFieldInsert: return new BitFieldInsert((OpBitFieldInsert)instruction, context);
                case Op.OpBitFieldSExtract: return new BitFieldSExtract((OpBitFieldSExtract)instruction, context);
                case Op.OpBitFieldUExtract: return new BitFieldUExtract((OpBitFieldUExtract)instruction, context);
                case Op.OpBitReverse: return new BitReverse((OpBitReverse)instruction, context);
                case Op.OpBitCount: return new BitCount((OpBitCount)instruction, context);
                case Op.OpDPdx: return new DPdx((OpDPdx)instruction, context);
                case Op.OpDPdy: return new DPdy((OpDPdy)instruction, context);
                case Op.OpFwidth: return new Fwidth((OpFwidth)instruction, context);
                case Op.OpDPdxFine: return new DPdxFine((OpDPdxFine)instruction, context);
                case Op.OpDPdyFine: return new DPdyFine((OpDPdyFine)instruction, context);
                case Op.OpFwidthFine: return new FwidthFine((OpFwidthFine)instruction, context);
                case Op.OpDPdxCoarse: return new DPdxCoarse((OpDPdxCoarse)instruction, context);
                case Op.OpDPdyCoarse: return new DPdyCoarse((OpDPdyCoarse)instruction, context);
                case Op.OpFwidthCoarse: return new FwidthCoarse((OpFwidthCoarse)instruction, context);
                case Op.OpEmitVertex: return new EmitVertex((OpEmitVertex)instruction, context);
                case Op.OpEndPrimitive: return new EndPrimitive((OpEndPrimitive)instruction, context);
                case Op.OpEmitStreamVertex: return new EmitStreamVertex((OpEmitStreamVertex)instruction, context);
                case Op.OpEndStreamPrimitive: return new EndStreamPrimitive((OpEndStreamPrimitive)instruction, context);
                case Op.OpControlBarrier: return new ControlBarrier((OpControlBarrier)instruction, context);
                case Op.OpMemoryBarrier: return new MemoryBarrier((OpMemoryBarrier)instruction, context);
                case Op.OpAtomicLoad: return new AtomicLoad((OpAtomicLoad)instruction, context);
                case Op.OpAtomicStore: return new AtomicStore((OpAtomicStore)instruction, context);
                case Op.OpAtomicExchange: return new AtomicExchange((OpAtomicExchange)instruction, context);
                case Op.OpAtomicCompareExchange: return new AtomicCompareExchange((OpAtomicCompareExchange)instruction, context);
                case Op.OpAtomicCompareExchangeWeak: return new AtomicCompareExchangeWeak((OpAtomicCompareExchangeWeak)instruction, context);
                case Op.OpAtomicIIncrement: return new AtomicIIncrement((OpAtomicIIncrement)instruction, context);
                case Op.OpAtomicIDecrement: return new AtomicIDecrement((OpAtomicIDecrement)instruction, context);
                case Op.OpAtomicIAdd: return new AtomicIAdd((OpAtomicIAdd)instruction, context);
                case Op.OpAtomicISub: return new AtomicISub((OpAtomicISub)instruction, context);
                case Op.OpAtomicSMin: return new AtomicSMin((OpAtomicSMin)instruction, context);
                case Op.OpAtomicUMin: return new AtomicUMin((OpAtomicUMin)instruction, context);
                case Op.OpAtomicSMax: return new AtomicSMax((OpAtomicSMax)instruction, context);
                case Op.OpAtomicUMax: return new AtomicUMax((OpAtomicUMax)instruction, context);
                case Op.OpAtomicAnd: return new AtomicAnd((OpAtomicAnd)instruction, context);
                case Op.OpAtomicOr: return new AtomicOr((OpAtomicOr)instruction, context);
                case Op.OpAtomicXor: return new AtomicXor((OpAtomicXor)instruction, context);
                case Op.OpPhi: return new Phi((OpPhi)instruction, context);
                case Op.OpLoopMerge: return new LoopMerge((OpLoopMerge)instruction, context);
                case Op.OpSelectionMerge: return new SelectionMerge((OpSelectionMerge)instruction, context);
                case Op.OpLabel: return new Label((OpLabel)instruction, context);
                case Op.OpBranch: return new Branch((OpBranch)instruction, context);
                case Op.OpBranchConditional: return new BranchConditional((OpBranchConditional)instruction, context);
                case Op.OpSwitch: return new Switch((OpSwitch)instruction, context);
                case Op.OpKill: return new Kill((OpKill)instruction, context);
                case Op.OpReturn: return new Return((OpReturn)instruction, context);
                case Op.OpReturnValue: return new ReturnValue((OpReturnValue)instruction, context);
                case Op.OpUnreachable: return new Unreachable((OpUnreachable)instruction, context);
                case Op.OpLifetimeStart: return new LifetimeStart((OpLifetimeStart)instruction, context);
                case Op.OpLifetimeStop: return new LifetimeStop((OpLifetimeStop)instruction, context);
                case Op.OpGroupAsyncCopy: return new GroupAsyncCopy((OpGroupAsyncCopy)instruction, context);
                case Op.OpGroupWaitEvents: return new GroupWaitEvents((OpGroupWaitEvents)instruction, context);
                case Op.OpGroupAll: return new GroupAll((OpGroupAll)instruction, context);
                case Op.OpGroupAny: return new GroupAny((OpGroupAny)instruction, context);
                case Op.OpGroupBroadcast: return new GroupBroadcast((OpGroupBroadcast)instruction, context);
                case Op.OpGroupIAdd: return new GroupIAdd((OpGroupIAdd)instruction, context);
                case Op.OpGroupFAdd: return new GroupFAdd((OpGroupFAdd)instruction, context);
                case Op.OpGroupFMin: return new GroupFMin((OpGroupFMin)instruction, context);
                case Op.OpGroupUMin: return new GroupUMin((OpGroupUMin)instruction, context);
                case Op.OpGroupSMin: return new GroupSMin((OpGroupSMin)instruction, context);
                case Op.OpGroupFMax: return new GroupFMax((OpGroupFMax)instruction, context);
                case Op.OpGroupUMax: return new GroupUMax((OpGroupUMax)instruction, context);
                case Op.OpGroupSMax: return new GroupSMax((OpGroupSMax)instruction, context);
                case Op.OpReadPipe: return new ReadPipe((OpReadPipe)instruction, context);
                case Op.OpWritePipe: return new WritePipe((OpWritePipe)instruction, context);
                case Op.OpReservedReadPipe: return new ReservedReadPipe((OpReservedReadPipe)instruction, context);
                case Op.OpReservedWritePipe: return new ReservedWritePipe((OpReservedWritePipe)instruction, context);
                case Op.OpReserveReadPipePackets: return new ReserveReadPipePackets((OpReserveReadPipePackets)instruction, context);
                case Op.OpReserveWritePipePackets: return new ReserveWritePipePackets((OpReserveWritePipePackets)instruction, context);
                case Op.OpCommitReadPipe: return new CommitReadPipe((OpCommitReadPipe)instruction, context);
                case Op.OpCommitWritePipe: return new CommitWritePipe((OpCommitWritePipe)instruction, context);
                case Op.OpIsValidReserveId: return new IsValidReserveId((OpIsValidReserveId)instruction, context);
                case Op.OpGetNumPipePackets: return new GetNumPipePackets((OpGetNumPipePackets)instruction, context);
                case Op.OpGetMaxPipePackets: return new GetMaxPipePackets((OpGetMaxPipePackets)instruction, context);
                case Op.OpGroupReserveReadPipePackets: return new GroupReserveReadPipePackets((OpGroupReserveReadPipePackets)instruction, context);
                case Op.OpGroupReserveWritePipePackets: return new GroupReserveWritePipePackets((OpGroupReserveWritePipePackets)instruction, context);
                case Op.OpGroupCommitReadPipe: return new GroupCommitReadPipe((OpGroupCommitReadPipe)instruction, context);
                case Op.OpGroupCommitWritePipe: return new GroupCommitWritePipe((OpGroupCommitWritePipe)instruction, context);
                case Op.OpEnqueueMarker: return new EnqueueMarker((OpEnqueueMarker)instruction, context);
                case Op.OpEnqueueKernel: return new EnqueueKernel((OpEnqueueKernel)instruction, context);
                case Op.OpGetKernelNDrangeSubGroupCount: return new GetKernelNDrangeSubGroupCount((OpGetKernelNDrangeSubGroupCount)instruction, context);
                case Op.OpGetKernelNDrangeMaxSubGroupSize: return new GetKernelNDrangeMaxSubGroupSize((OpGetKernelNDrangeMaxSubGroupSize)instruction, context);
                case Op.OpGetKernelWorkGroupSize: return new GetKernelWorkGroupSize((OpGetKernelWorkGroupSize)instruction, context);
                case Op.OpGetKernelPreferredWorkGroupSizeMultiple: return new GetKernelPreferredWorkGroupSizeMultiple((OpGetKernelPreferredWorkGroupSizeMultiple)instruction, context);
                case Op.OpRetainEvent: return new RetainEvent((OpRetainEvent)instruction, context);
                case Op.OpReleaseEvent: return new ReleaseEvent((OpReleaseEvent)instruction, context);
                case Op.OpCreateUserEvent: return new CreateUserEvent((OpCreateUserEvent)instruction, context);
                case Op.OpIsValidEvent: return new IsValidEvent((OpIsValidEvent)instruction, context);
                case Op.OpSetUserEventStatus: return new SetUserEventStatus((OpSetUserEventStatus)instruction, context);
                case Op.OpCaptureEventProfilingInfo: return new CaptureEventProfilingInfo((OpCaptureEventProfilingInfo)instruction, context);
                case Op.OpGetDefaultQueue: return new GetDefaultQueue((OpGetDefaultQueue)instruction, context);
                case Op.OpBuildNDRange: return new BuildNDRange((OpBuildNDRange)instruction, context);
                case Op.OpImageSparseSampleImplicitLod: return new ImageSparseSampleImplicitLod((OpImageSparseSampleImplicitLod)instruction, context);
                case Op.OpImageSparseSampleExplicitLod: return new ImageSparseSampleExplicitLod((OpImageSparseSampleExplicitLod)instruction, context);
                case Op.OpImageSparseSampleDrefImplicitLod: return new ImageSparseSampleDrefImplicitLod((OpImageSparseSampleDrefImplicitLod)instruction, context);
                case Op.OpImageSparseSampleDrefExplicitLod: return new ImageSparseSampleDrefExplicitLod((OpImageSparseSampleDrefExplicitLod)instruction, context);
                case Op.OpImageSparseSampleProjImplicitLod: return new ImageSparseSampleProjImplicitLod((OpImageSparseSampleProjImplicitLod)instruction, context);
                case Op.OpImageSparseSampleProjExplicitLod: return new ImageSparseSampleProjExplicitLod((OpImageSparseSampleProjExplicitLod)instruction, context);
                case Op.OpImageSparseSampleProjDrefImplicitLod: return new ImageSparseSampleProjDrefImplicitLod((OpImageSparseSampleProjDrefImplicitLod)instruction, context);
                case Op.OpImageSparseSampleProjDrefExplicitLod: return new ImageSparseSampleProjDrefExplicitLod((OpImageSparseSampleProjDrefExplicitLod)instruction, context);
                case Op.OpImageSparseFetch: return new ImageSparseFetch((OpImageSparseFetch)instruction, context);
                case Op.OpImageSparseGather: return new ImageSparseGather((OpImageSparseGather)instruction, context);
                case Op.OpImageSparseDrefGather: return new ImageSparseDrefGather((OpImageSparseDrefGather)instruction, context);
                case Op.OpImageSparseTexelsResident: return new ImageSparseTexelsResident((OpImageSparseTexelsResident)instruction, context);
                case Op.OpNoLine: return new NoLine((OpNoLine)instruction, context);
                case Op.OpAtomicFlagTestAndSet: return new AtomicFlagTestAndSet((OpAtomicFlagTestAndSet)instruction, context);
                case Op.OpAtomicFlagClear: return new AtomicFlagClear((OpAtomicFlagClear)instruction, context);
                case Op.OpImageSparseRead: return new ImageSparseRead((OpImageSparseRead)instruction, context);
                case Op.OpDecorateId: return new DecorateId((OpDecorateId)instruction, context);
                case Op.OpSubgroupBallotKHR: return new SubgroupBallotKHR((OpSubgroupBallotKHR)instruction, context);
                case Op.OpSubgroupFirstInvocationKHR: return new SubgroupFirstInvocationKHR((OpSubgroupFirstInvocationKHR)instruction, context);
                case Op.OpSubgroupAllKHR: return new SubgroupAllKHR((OpSubgroupAllKHR)instruction, context);
                case Op.OpSubgroupAnyKHR: return new SubgroupAnyKHR((OpSubgroupAnyKHR)instruction, context);
                case Op.OpSubgroupAllEqualKHR: return new SubgroupAllEqualKHR((OpSubgroupAllEqualKHR)instruction, context);
                case Op.OpSubgroupReadInvocationKHR: return new SubgroupReadInvocationKHR((OpSubgroupReadInvocationKHR)instruction, context);
                case Op.OpGroupIAddNonUniformAMD: return new GroupIAddNonUniformAMD((OpGroupIAddNonUniformAMD)instruction, context);
                case Op.OpGroupFAddNonUniformAMD: return new GroupFAddNonUniformAMD((OpGroupFAddNonUniformAMD)instruction, context);
                case Op.OpGroupFMinNonUniformAMD: return new GroupFMinNonUniformAMD((OpGroupFMinNonUniformAMD)instruction, context);
                case Op.OpGroupUMinNonUniformAMD: return new GroupUMinNonUniformAMD((OpGroupUMinNonUniformAMD)instruction, context);
                case Op.OpGroupSMinNonUniformAMD: return new GroupSMinNonUniformAMD((OpGroupSMinNonUniformAMD)instruction, context);
                case Op.OpGroupFMaxNonUniformAMD: return new GroupFMaxNonUniformAMD((OpGroupFMaxNonUniformAMD)instruction, context);
                case Op.OpGroupUMaxNonUniformAMD: return new GroupUMaxNonUniformAMD((OpGroupUMaxNonUniformAMD)instruction, context);
                case Op.OpGroupSMaxNonUniformAMD: return new GroupSMaxNonUniformAMD((OpGroupSMaxNonUniformAMD)instruction, context);
                case Op.OpFragmentMaskFetchAMD: return new FragmentMaskFetchAMD((OpFragmentMaskFetchAMD)instruction, context);
                case Op.OpFragmentFetchAMD: return new FragmentFetchAMD((OpFragmentFetchAMD)instruction, context);
                case Op.OpSubgroupShuffleINTEL: return new SubgroupShuffleINTEL((OpSubgroupShuffleINTEL)instruction, context);
                case Op.OpSubgroupShuffleDownINTEL: return new SubgroupShuffleDownINTEL((OpSubgroupShuffleDownINTEL)instruction, context);
                case Op.OpSubgroupShuffleUpINTEL: return new SubgroupShuffleUpINTEL((OpSubgroupShuffleUpINTEL)instruction, context);
                case Op.OpSubgroupShuffleXorINTEL: return new SubgroupShuffleXorINTEL((OpSubgroupShuffleXorINTEL)instruction, context);
                case Op.OpSubgroupBlockReadINTEL: return new SubgroupBlockReadINTEL((OpSubgroupBlockReadINTEL)instruction, context);
                case Op.OpSubgroupBlockWriteINTEL: return new SubgroupBlockWriteINTEL((OpSubgroupBlockWriteINTEL)instruction, context);
                case Op.OpSubgroupImageBlockReadINTEL: return new SubgroupImageBlockReadINTEL((OpSubgroupImageBlockReadINTEL)instruction, context);
                case Op.OpSubgroupImageBlockWriteINTEL: return new SubgroupImageBlockWriteINTEL((OpSubgroupImageBlockWriteINTEL)instruction, context);
                case Op.OpDecorateStringGOOGLE: return new DecorateStringGOOGLE((OpDecorateStringGOOGLE)instruction, context);
                case Op.OpMemberDecorateStringGOOGLE: return new MemberDecorateStringGOOGLE((OpMemberDecorateStringGOOGLE)instruction, context);
                case Op.OpLine: return null;
                default:
                    throw new NotImplementedException(instruction + " not implemented");
            }
        }

        public virtual bool TryGetReturnType(out SpirvTypeBase type)
        {
            type = null;
            return false;
        }

        public virtual void FixForwardReferences(Instruction instruction, SpirvInstructionTreeBuilder context)
        {
        }
    }
}
